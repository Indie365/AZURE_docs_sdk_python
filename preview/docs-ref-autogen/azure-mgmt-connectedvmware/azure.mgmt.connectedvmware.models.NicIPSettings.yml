### YamlMime:PythonClass
uid: azure.mgmt.connectedvmware.models.NicIPSettings
name: NicIPSettings
fullName: azure.mgmt.connectedvmware.models.NicIPSettings
module: azure.mgmt.connectedvmware.models
inheritances:
- azure.mgmt.connectedvmware._serialization.Model
summary: 'Defines the network interface ip settings.


  Variables are only populated by the server, and will be ignored when sending a request.'
constructor:
  syntax: 'NicIPSettings(*, allocation_method: str | _models.IPAddressAllocationMethod
    | None = None, dns_servers: List[str] | None = None, gateway: List[str] | None
    = None, ip_address: str | None = None, subnet_mask: str | None = None, **kwargs)'
  parameters:
  - name: allocation_method
    description: 'Gets or sets the nic allocation method. Known values are: "unset",

      "dynamic", "static", "linklayer", "random", and "other".'
    types:
    - <xref:str>
    - <xref:azure.mgmt.connectedvmware.models.IPAddressAllocationMethod>
  - name: dns_servers
    description: Gets or sets the dns servers.
    types:
    - <xref:azure.mgmt.connectedvmware.aio.operations.ClustersOperations.list>[<xref:str>]
  - name: gateway
    description: Gets or sets the gateway.
    types:
    - <xref:azure.mgmt.connectedvmware.aio.operations.ClustersOperations.list>[<xref:str>]
  - name: ip_address
    description: Gets or sets the ip address for the nic.
    types:
    - <xref:str>
  - name: subnet_mask
    description: Gets or sets the mask.
    types:
    - <xref:str>
variables:
- description: 'Gets or sets the nic allocation method. Known values are: "unset",

    "dynamic", "static", "linklayer", "random", and "other".'
  name: allocation_method
  types:
  - <xref:str>
  - <xref:azure.mgmt.connectedvmware.models.IPAddressAllocationMethod>
- description: Gets or sets the dns servers.
  name: dns_servers
  types:
  - <xref:list>[<xref:str>]
- description: Gets or sets the gateway.
  name: gateway
  types:
  - <xref:list>[<xref:str>]
- description: Gets or sets the ip address for the nic.
  name: ip_address
  types:
  - <xref:str>
- description: Gets or sets the mask.
  name: subnet_mask
  types:
  - <xref:str>
- description: Gets or sets the primary server.
  name: primary_wins_server
  types:
  - <xref:str>
- description: Gets or sets the secondary server.
  name: secondary_wins_server
  types:
  - <xref:str>
- description: 'Gets or sets the IP address information being reported for this NIC.

    This contains the same IPv4 information above plus IPV6 information.'
  name: ip_address_info
  types:
  - <xref:list>[<xref:azure.mgmt.connectedvmware.models.NicIPAddressSettings>]
methods:
- uid: azure.mgmt.connectedvmware.models.NicIPSettings.as_dict
  name: as_dict
  summary: "Return a dict that can be JSONify using json.dump.\n\nAdvanced usage might\
    \ optionally use a callback as parameter:\n\nKey is the attribute name used in\
    \ Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with the\n\
    msrest type and 'key' with the RestAPI encoded key.\nValue is the current value\
    \ in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: as_dict(keep_readonly=True, key_transformer=<function attribute_transformer>,
    **kwargs)
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.mgmt.connectedvmware.models.NicIPSettings.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: deserialize(data, content_type=None)
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.connectedvmware.models.NicIPSettings.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending()
- uid: azure.mgmt.connectedvmware.models.NicIPSettings.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: from_dict(data, key_extractors=None, content_type=None)
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.connectedvmware.models.NicIPSettings.is_xml_model
  name: is_xml_model
  signature: is_xml_model()
- uid: azure.mgmt.connectedvmware.models.NicIPSettings.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to azure from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: serialize(keep_readonly=False, **kwargs)
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
