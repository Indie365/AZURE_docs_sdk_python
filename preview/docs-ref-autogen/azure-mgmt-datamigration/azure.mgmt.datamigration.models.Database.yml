### YamlMime:PythonClass
uid: azure.mgmt.datamigration.models.Database
name: Database
fullName: azure.mgmt.datamigration.models.Database
module: azure.mgmt.datamigration.models
inheritances:
- azure.mgmt.datamigration._serialization.Model
summary: Information about a single database.
constructor:
  syntax: 'Database(*, id: str | None = None, name: str | None = None, compatibility_level:
    str | _models.DatabaseCompatLevel | None = None, collation: str | None = None,
    server_name: str | None = None, fqdn: str | None = None, install_id: str | None
    = None, server_version: str | None = None, server_edition: str | None = None,
    server_level: str | None = None, server_default_data_path: str | None = None,
    server_default_log_path: str | None = None, server_default_backup_path: str |
    None = None, server_core_count: int | None = None, server_visible_online_core_count:
    int | None = None, database_state: str | _models.DatabaseState | None = None,
    server_id: str | None = None, **kwargs)'
  parameters:
  - name: id
    description: Unique identifier for the database.
    types:
    - <xref:str>
  - name: name
    description: Name of the database.
    types:
    - <xref:str>
  - name: compatibility_level
    description: 'SQL Server compatibility level of database. Known values are:

      "CompatLevel80", "CompatLevel90", "CompatLevel100", "CompatLevel110", "CompatLevel120",

      "CompatLevel130", and "CompatLevel140".'
    types:
    - <xref:str>
    - <xref:azure.mgmt.datamigration.models.DatabaseCompatLevel>
  - name: collation
    description: Collation name of the database.
    types:
    - <xref:str>
  - name: server_name
    description: Name of the server.
    types:
    - <xref:str>
  - name: fqdn
    description: Fully qualified name.
    types:
    - <xref:str>
  - name: install_id
    description: Install id of the database.
    types:
    - <xref:str>
  - name: server_version
    description: Version of the server.
    types:
    - <xref:str>
  - name: server_edition
    description: Edition of the server.
    types:
    - <xref:str>
  - name: server_level
    description: Product level of the server (RTM, SP, CTP).
    types:
    - <xref:str>
  - name: server_default_data_path
    description: Default path of the data files.
    types:
    - <xref:str>
  - name: server_default_log_path
    description: Default path of the log files.
    types:
    - <xref:str>
  - name: server_default_backup_path
    description: Default path of the backup folder.
    types:
    - <xref:str>
  - name: server_core_count
    description: Number of cores on the server.
    types:
    - <xref:int>
  - name: server_visible_online_core_count
    description: 'Number of cores on the server that have VISIBLE

      ONLINE status.'
    types:
    - <xref:int>
  - name: database_state
    description: 'State of the database. Known values are: "Online", "Restoring",

      "Recovering", "RecoveryPending", "Suspect", "Emergency", "Offline", "Copying",
      and

      "OfflineSecondary".'
    types:
    - <xref:str>
    - <xref:azure.mgmt.datamigration.models.DatabaseState>
  - name: server_id
    description: The unique Server Id.
    types:
    - <xref:str>
variables:
- description: Unique identifier for the database.
  name: id
  types:
  - <xref:str>
- description: Name of the database.
  name: name
  types:
  - <xref:str>
- description: 'SQL Server compatibility level of database. Known values are:

    "CompatLevel80", "CompatLevel90", "CompatLevel100", "CompatLevel110", "CompatLevel120",

    "CompatLevel130", and "CompatLevel140".'
  name: compatibility_level
  types:
  - <xref:str>
  - <xref:azure.mgmt.datamigration.models.DatabaseCompatLevel>
- description: Collation name of the database.
  name: collation
  types:
  - <xref:str>
- description: Name of the server.
  name: server_name
  types:
  - <xref:str>
- description: Fully qualified name.
  name: fqdn
  types:
  - <xref:str>
- description: Install id of the database.
  name: install_id
  types:
  - <xref:str>
- description: Version of the server.
  name: server_version
  types:
  - <xref:str>
- description: Edition of the server.
  name: server_edition
  types:
  - <xref:str>
- description: Product level of the server (RTM, SP, CTP).
  name: server_level
  types:
  - <xref:str>
- description: Default path of the data files.
  name: server_default_data_path
  types:
  - <xref:str>
- description: Default path of the log files.
  name: server_default_log_path
  types:
  - <xref:str>
- description: Default path of the backup folder.
  name: server_default_backup_path
  types:
  - <xref:str>
- description: Number of cores on the server.
  name: server_core_count
  types:
  - <xref:int>
- description: 'Number of cores on the server that have VISIBLE ONLINE

    status.'
  name: server_visible_online_core_count
  types:
  - <xref:int>
- description: 'State of the database. Known values are: "Online", "Restoring",

    "Recovering", "RecoveryPending", "Suspect", "Emergency", "Offline", "Copying",
    and

    "OfflineSecondary".'
  name: database_state
  types:
  - <xref:str>
  - <xref:azure.mgmt.datamigration.models.DatabaseState>
- description: The unique Server Id.
  name: server_id
  types:
  - <xref:str>
methods:
- uid: azure.mgmt.datamigration.models.Database.as_dict
  name: as_dict
  summary: "Return a dict that can be JSONify using json.dump.\n\nAdvanced usage might\
    \ optionally use a callback as parameter:\n\nKey is the attribute name used in\
    \ Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with the\n\
    msrest type and 'key' with the RestAPI encoded key.\nValue is the current value\
    \ in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: as_dict(keep_readonly=True, key_transformer=<function attribute_transformer>,
    **kwargs)
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.mgmt.datamigration.models.Database.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: deserialize(data, content_type=None)
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.datamigration.models.Database.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending()
- uid: azure.mgmt.datamigration.models.Database.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: from_dict(data, key_extractors=None, content_type=None)
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.datamigration.models.Database.is_xml_model
  name: is_xml_model
  signature: is_xml_model()
- uid: azure.mgmt.datamigration.models.Database.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to azure from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: serialize(keep_readonly=False, **kwargs)
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
