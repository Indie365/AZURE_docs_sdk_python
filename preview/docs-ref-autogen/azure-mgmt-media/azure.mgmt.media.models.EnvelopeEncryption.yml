### YamlMime:PythonClass
uid: azure.mgmt.media.models.EnvelopeEncryption
name: EnvelopeEncryption
fullName: azure.mgmt.media.models.EnvelopeEncryption
module: azure.mgmt.media.models
inheritances:
- azure.mgmt.media._serialization.Model
summary: Class for EnvelopeEncryption encryption scheme.
constructor:
  syntax: 'EnvelopeEncryption(*, enabled_protocols: _models.EnabledProtocols | None
    = None, clear_tracks: List[_models.TrackSelection] | None = None, content_keys:
    _models.StreamingPolicyContentKeys | None = None, custom_key_acquisition_url_template:
    str | None = None, **kwargs)'
  parameters:
  - name: enabled_protocols
    description: Representing supported protocols.
    types:
    - <xref:azure.mgmt.media.models.EnabledProtocols>
  - name: clear_tracks
    description: Representing which tracks should not be encrypted.
    types:
    - <xref:azure.mgmt.media.aio.operations.AccountFiltersOperations.list>[<xref:azure.mgmt.media.models.TrackSelection>]
  - name: content_keys
    description: 'Representing default content key for each encryption scheme and
      separate

      content keys for specific tracks.'
    types:
    - <xref:azure.mgmt.media.models.StreamingPolicyContentKeys>
  - name: custom_key_acquisition_url_template
    description: 'Template for the URL of the custom service

      delivering keys to end user players.  Not required when using Azure Media Services
      for issuing

      keys.  The template supports replaceable tokens that the service will update
      at runtime with

      the value specific to the request.  The currently supported token values are

      {AlternativeMediaId}, which is replaced with the value of

      StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced
      with the value of

      identifier of the key being requested.'
    types:
    - <xref:str>
variables:
- description: Representing supported protocols.
  name: enabled_protocols
  types:
  - <xref:azure.mgmt.media.models.EnabledProtocols>
- description: Representing which tracks should not be encrypted.
  name: clear_tracks
  types:
  - <xref:list>[<xref:azure.mgmt.media.models.TrackSelection>]
- description: 'Representing default content key for each encryption scheme and separate

    content keys for specific tracks.'
  name: content_keys
  types:
  - <xref:azure.mgmt.media.models.StreamingPolicyContentKeys>
- description: 'Template for the URL of the custom service

    delivering keys to end user players.  Not required when using Azure Media Services
    for issuing

    keys.  The template supports replaceable tokens that the service will update at
    runtime with

    the value specific to the request.  The currently supported token values are

    {AlternativeMediaId}, which is replaced with the value of

    StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with
    the value of

    identifier of the key being requested.'
  name: custom_key_acquisition_url_template
  types:
  - <xref:str>
methods:
- uid: azure.mgmt.media.models.EnvelopeEncryption.as_dict
  name: as_dict
  summary: "Return a dict that can be JSONify using json.dump.\n\nAdvanced usage might\
    \ optionally use a callback as parameter:\n\nKey is the attribute name used in\
    \ Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with the\n\
    msrest type and 'key' with the RestAPI encoded key.\nValue is the current value\
    \ in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: as_dict(keep_readonly=True, key_transformer=<function attribute_transformer>,
    **kwargs)
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.mgmt.media.models.EnvelopeEncryption.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: deserialize(data, content_type=None)
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.media.models.EnvelopeEncryption.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending()
- uid: azure.mgmt.media.models.EnvelopeEncryption.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: from_dict(data, key_extractors=None, content_type=None)
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.media.models.EnvelopeEncryption.is_xml_model
  name: is_xml_model
  signature: is_xml_model()
- uid: azure.mgmt.media.models.EnvelopeEncryption.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to azure from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: serialize(keep_readonly=False, **kwargs)
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
