### YamlMime:PythonClass
uid: azure.mgmt.guestconfig.models.ConfigurationSetting
name: ConfigurationSetting
fullName: azure.mgmt.guestconfig.models.ConfigurationSetting
module: azure.mgmt.guestconfig.models
inheritances:
- azure.mgmt.guestconfig._serialization.Model
summary: 'Configuration setting of LCM (Local Configuration Manager).


  Variables are only populated by the server, and will be ignored when sending a request.'
constructor:
  syntax: ConfigurationSetting(**kwargs)
variables:
- description: 'Specifies how the LCM(Local Configuration Manager) actually applies

    the configuration to the target nodes. Possible values are ApplyOnly, ApplyAndMonitor,
    and

    ApplyAndAutoCorrect. Known values are: "ApplyOnly", "ApplyAndMonitor", and

    "ApplyAndAutoCorrect".'
  name: configuration_mode
  types:
  - <xref:str>
  - <xref:azure.mgmt.guestconfig.models.ConfigurationMode>
- description: 'If true - new configurations downloaded from the pull service are

    allowed to overwrite the old ones on the target node. Otherwise, false.'
  name: allow_module_overwrite
  types:
  - <xref:bool>
- description: 'Specifies what happens after a reboot during the application of a

    configuration. The possible values are ContinueConfiguration and StopConfiguration.
    Known

    values are: "ContinueConfiguration" and "StopConfiguration".'
  name: action_after_reboot
  types:
  - <xref:str>
  - <xref:azure.mgmt.guestconfig.models.ActionAfterReboot>
- description: 'The time interval, in minutes, at which the LCM checks a pull

    service to get updated configurations. This value is ignored if the LCM is not
    configured in

    pull mode. The default value is 30.'
  name: refresh_frequency_mins
  types:
  - <xref:float>
- description: 'Set this to true to automatically reboot the node after a configuration

    that requires reboot is applied. Otherwise, you will have to manually reboot the
    node for any

    configuration that requires it. The default value is false. To use this setting
    when a reboot

    condition is enacted by something other than DSC (such as Windows Installer),
    combine this

    setting with the xPendingReboot module.'
  name: reboot_if_needed
  types:
  - <xref:bool>
- description: 'How often, in minutes, the current configuration is

    checked and applied. This property is ignored if the ConfigurationMode property
    is set to

    ApplyOnly. The default value is 15.'
  name: configuration_mode_frequency_mins
  types:
  - <xref:float>
methods:
- uid: azure.mgmt.guestconfig.models.ConfigurationSetting.as_dict
  name: as_dict
  summary: "Return a dict that can be JSONify using json.dump.\n\nAdvanced usage might\
    \ optionally use a callback as parameter:\n\nKey is the attribute name used in\
    \ Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with the\n\
    msrest type and 'key' with the RestAPI encoded key.\nValue is the current value\
    \ in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: as_dict(keep_readonly=True, key_transformer=<function attribute_transformer>,
    **kwargs)
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.mgmt.guestconfig.models.ConfigurationSetting.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: deserialize(data, content_type=None)
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.guestconfig.models.ConfigurationSetting.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending()
- uid: azure.mgmt.guestconfig.models.ConfigurationSetting.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: from_dict(data, key_extractors=None, content_type=None)
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.guestconfig.models.ConfigurationSetting.is_xml_model
  name: is_xml_model
  signature: is_xml_model()
- uid: azure.mgmt.guestconfig.models.ConfigurationSetting.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to azure from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: serialize(keep_readonly=False, **kwargs)
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
