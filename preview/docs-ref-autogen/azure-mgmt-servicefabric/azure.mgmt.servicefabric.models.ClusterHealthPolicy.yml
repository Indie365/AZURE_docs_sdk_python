### YamlMime:PythonClass
uid: azure.mgmt.servicefabric.models.ClusterHealthPolicy
name: ClusterHealthPolicy
fullName: azure.mgmt.servicefabric.models.ClusterHealthPolicy
module: azure.mgmt.servicefabric.models
inheritances:
- azure.mgmt.servicefabric._serialization.Model
summary: Defines a health policy used to evaluate the health of the cluster or of
  a cluster node.
constructor:
  syntax: 'ClusterHealthPolicy(*, max_percent_unhealthy_nodes: int = 0, max_percent_unhealthy_applications:
    int = 0, application_health_policies: Dict[str, _models.ApplicationHealthPolicy]
    | None = None, **kwargs)'
  parameters:
  - name: max_percent_unhealthy_nodes
    description: 'The maximum allowed percentage of unhealthy nodes before

      reporting an error. For example, to allow 10% of nodes to be unhealthy, this
      value would be 10.


      The percentage represents the maximum tolerated percentage of nodes that can
      be unhealthy

      before the cluster is considered in error.

      If the percentage is respected but there is at least one unhealthy node, the
      health is

      evaluated as Warning.

      The percentage is calculated by dividing the number of unhealthy nodes over
      the total number

      of nodes in the cluster.

      The computation rounds up to tolerate one failure on small numbers of nodes.
      Default

      percentage is zero.


      In large clusters, some nodes will always be down or out for repairs, so this
      percentage

      should be configured to tolerate that.'
    types:
    - <xref:int>
  - name: max_percent_unhealthy_applications
    description: 'The maximum allowed percentage of unhealthy

      applications before reporting an error. For example, to allow 10% of applications
      to be

      unhealthy, this value would be 10.


      The percentage represents the maximum tolerated percentage of applications that
      can be

      unhealthy before the cluster is considered in error.

      If the percentage is respected but there is at least one unhealthy application,
      the health is

      evaluated as Warning.

      This is calculated by dividing the number of unhealthy applications over the
      total number of

      application instances in the cluster, excluding applications of application
      types that are

      included in the ApplicationTypeHealthPolicyMap.

      The computation rounds up to tolerate one failure on small numbers of applications.
      Default

      percentage is zero.'
    types:
    - <xref:int>
  - name: application_health_policies
    description: 'Defines the application health policy map used to

      evaluate the health of an application or one of its children entities.'
    types:
    - <xref:dict>[<xref:str,azure.mgmt.servicefabric.models.ApplicationHealthPolicy>]
variables:
- description: 'The maximum allowed percentage of unhealthy nodes before

    reporting an error. For example, to allow 10% of nodes to be unhealthy, this value
    would be 10.


    The percentage represents the maximum tolerated percentage of nodes that can be
    unhealthy

    before the cluster is considered in error.

    If the percentage is respected but there is at least one unhealthy node, the health
    is

    evaluated as Warning.

    The percentage is calculated by dividing the number of unhealthy nodes over the
    total number

    of nodes in the cluster.

    The computation rounds up to tolerate one failure on small numbers of nodes. Default

    percentage is zero.


    In large clusters, some nodes will always be down or out for repairs, so this
    percentage

    should be configured to tolerate that.'
  name: max_percent_unhealthy_nodes
  types:
  - <xref:int>
- description: 'The maximum allowed percentage of unhealthy

    applications before reporting an error. For example, to allow 10% of applications
    to be

    unhealthy, this value would be 10.


    The percentage represents the maximum tolerated percentage of applications that
    can be

    unhealthy before the cluster is considered in error.

    If the percentage is respected but there is at least one unhealthy application,
    the health is

    evaluated as Warning.

    This is calculated by dividing the number of unhealthy applications over the total
    number of

    application instances in the cluster, excluding applications of application types
    that are

    included in the ApplicationTypeHealthPolicyMap.

    The computation rounds up to tolerate one failure on small numbers of applications.
    Default

    percentage is zero.'
  name: max_percent_unhealthy_applications
  types:
  - <xref:int>
- description: 'Defines the application health policy map used to evaluate

    the health of an application or one of its children entities.'
  name: application_health_policies
  types:
  - <xref:dict>[<xref:str,azure.mgmt.servicefabric.models.ApplicationHealthPolicy>]
methods:
- uid: azure.mgmt.servicefabric.models.ClusterHealthPolicy.as_dict
  name: as_dict
  summary: "Return a dict that can be JSONify using json.dump.\n\nAdvanced usage might\
    \ optionally use a callback as parameter:\n\nKey is the attribute name used in\
    \ Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with the\n\
    msrest type and 'key' with the RestAPI encoded key.\nValue is the current value\
    \ in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: as_dict(keep_readonly=True, key_transformer=<function attribute_transformer>,
    **kwargs)
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.mgmt.servicefabric.models.ClusterHealthPolicy.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: deserialize(data, content_type=None)
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.servicefabric.models.ClusterHealthPolicy.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending()
- uid: azure.mgmt.servicefabric.models.ClusterHealthPolicy.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: from_dict(data, key_extractors=None, content_type=None)
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.servicefabric.models.ClusterHealthPolicy.is_xml_model
  name: is_xml_model
  signature: is_xml_model()
- uid: azure.mgmt.servicefabric.models.ClusterHealthPolicy.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to azure from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: serialize(keep_readonly=False, **kwargs)
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
