### YamlMime:PythonClass
uid: azure.mgmt.security.v2020_01_01_preview.models.AwAssumeRoleAuthenticationDetailsProperties
name: AwAssumeRoleAuthenticationDetailsProperties
fullName: azure.mgmt.security.v2020_01_01_preview.models.AwAssumeRoleAuthenticationDetailsProperties
module: azure.mgmt.security.v2020_01_01_preview.models
inheritances:
- azure.mgmt.security.v2020_01_01_preview.models._models_py3.AuthenticationDetailsProperties
summary: 'AWS cloud account connector based assume role, the role enables delegating
  access to your AWS

  resources. The role is composed of role Amazon Resource Name (ARN) and external
  ID. For more

  details, refer to `<a

  href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user.html">Creating

  a Role to Delegate Permissions to an IAM User (write only)</a>`.


  Variables are only populated by the server, and will be ignored when sending a request.


  All required parameters must be populated in order to send to Azure.'
constructor:
  syntax: 'AwAssumeRoleAuthenticationDetailsProperties(*, aws_assume_role_arn: str,
    aws_external_id: str, **kwargs: Any)'
  parameters:
  - name: aws_assume_role_arn
    description: 'Assumed role ID is an identifier that you can use to create

      temporary security credentials. Required.'
    types:
    - <xref:str>
  - name: aws_external_id
    description: 'A unique identifier that is required when you assume a role in

      another account. Required.'
    types:
    - <xref:str>
variables:
- description: 'State of the multi-cloud connector. Known values are:

    "Valid", "Invalid", "Expired", and "IncorrectPolicy".'
  name: authentication_provisioning_state
  types:
  - <xref:str>
  - <xref:azure.mgmt.security.v2020_01_01_preview.models.AuthenticationProvisioningState>
- description: The permissions detected in the cloud account.
  name: granted_permissions
  types:
  - <xref:list>[<xref:str>
  - <xref:azure.mgmt.security.v2020_01_01_preview.models.PermissionProperty>]
- description: 'Connect to your cloud account, for AWS use either account

    credentials or role-based authentication. For GCP use account organization credentials.

    Required. Known values are: "awsCreds", "awsAssumeRole", and "gcpCredentials".'
  name: authentication_type
  types:
  - <xref:str>
  - <xref:azure.mgmt.security.v2020_01_01_preview.models.AuthenticationType>
- description: The ID of the cloud account.
  name: account_id
  types:
  - <xref:str>
- description: 'Assumed role ID is an identifier that you can use to create

    temporary security credentials. Required.'
  name: aws_assume_role_arn
  types:
  - <xref:str>
- description: 'A unique identifier that is required when you assume a role in another

    account. Required.'
  name: aws_external_id
  types:
  - <xref:str>
methods:
- uid: azure.mgmt.security.v2020_01_01_preview.models.AwAssumeRoleAuthenticationDetailsProperties.as_dict
  name: as_dict
  summary: "Return a dict that can be serialized using json.dump.\n\nAdvanced usage\
    \ might optionally use a callback as parameter:\n\nKey is the attribute name used\
    \ in Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with\
    \ the\nmsrest type and 'key' with the RestAPI encoded key.\nValue is the current\
    \ value in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: 'as_dict(keep_readonly: bool = True, key_transformer: ~typing.Callable[[str,
    ~typing.Dict[str, ~typing.Any], ~typing.Any], ~typing.Any] = <function attribute_transformer>,
    **kwargs: ~typing.Any) -> MutableMapping[str, Any]'
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.mgmt.security.v2020_01_01_preview.models.AwAssumeRoleAuthenticationDetailsProperties.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: 'deserialize(data: Any, content_type: str | None = None) -> ModelType'
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.security.v2020_01_01_preview.models.AwAssumeRoleAuthenticationDetailsProperties.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending() -> None
- uid: azure.mgmt.security.v2020_01_01_preview.models.AwAssumeRoleAuthenticationDetailsProperties.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: 'from_dict(data: Any, key_extractors: Callable[[str, Dict[str, Any],
    Any], Any] | None = None, content_type: str | None = None) -> ModelType'
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.security.v2020_01_01_preview.models.AwAssumeRoleAuthenticationDetailsProperties.is_xml_model
  name: is_xml_model
  signature: is_xml_model() -> bool
- uid: azure.mgmt.security.v2020_01_01_preview.models.AwAssumeRoleAuthenticationDetailsProperties.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to azure from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: 'serialize(keep_readonly: bool = False, **kwargs: Any) -> MutableMapping[str,
    Any]'
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
