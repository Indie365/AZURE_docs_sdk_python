### YamlMime:PythonClass
uid: azure.mgmt.securityinsight.models.CodelessConnectorPollingAuthProperties
name: CodelessConnectorPollingAuthProperties
fullName: azure.mgmt.securityinsight.models.CodelessConnectorPollingAuthProperties
module: azure.mgmt.securityinsight.models
inheritances:
- azure.mgmt.securityinsight._serialization.Model
summary: 'Describe the authentication properties needed to successfully authenticate
  with the server.


  All required parameters must be populated in order to send to Azure.'
constructor:
  syntax: 'CodelessConnectorPollingAuthProperties(*, auth_type: str, api_key_name:
    str | None = None, api_key_identifier: str | None = None, is_api_key_in_post_payload:
    str | None = None, flow_name: str | None = None, token_endpoint: str | None =
    None, authorization_endpoint: str | None = None, authorization_endpoint_query_parameters:
    MutableMapping[str, Any] | None = None, redirection_endpoint: str | None = None,
    token_endpoint_headers: MutableMapping[str, Any] | None = None, token_endpoint_query_parameters:
    MutableMapping[str, Any] | None = None, is_client_secret_in_header: bool | None
    = None, scope: str | None = None, **kwargs)'
  parameters:
  - name: auth_type
    description: The authentication type. Required.
    types:
    - <xref:str>
  - name: api_key_name
    description: The header name which the token is sent with.
    types:
    - <xref:str>
  - name: api_key_identifier
    description: A prefix send in the header before the actual token.
    types:
    - <xref:str>
  - name: is_api_key_in_post_payload
    description: Marks if the key should sent in header.
    types:
    - <xref:str>
  - name: flow_name
    description: Describes the flow name, for example 'AuthCode' for Oauth 2.0.
    types:
    - <xref:str>
  - name: token_endpoint
    description: The endpoint used to issue a token, used in Oauth 2.0 flow.
    types:
    - <xref:str>
  - name: authorization_endpoint
    description: 'The endpoint used to authorize the user, used in Oauth 2.0

      flow.'
    types:
    - <xref:str>
  - name: authorization_endpoint_query_parameters
    description: 'The query parameters used in authorization

      request, used in Oauth 2.0 flow.'
    types:
    - <xref:azure.mgmt.securityinsight.models.FileFormat.JSON>
  - name: redirection_endpoint
    description: 'The redirect endpoint where we will get the authorization code,

      used in Oauth 2.0 flow.'
    types:
    - <xref:str>
  - name: token_endpoint_headers
    description: 'The query headers used in token request, used in Oauth 2.0

      flow.'
    types:
    - <xref:azure.mgmt.securityinsight.models.FileFormat.JSON>
  - name: token_endpoint_query_parameters
    description: 'The query parameters used in token request, used in

      Oauth 2.0 flow.'
    types:
    - <xref:azure.mgmt.securityinsight.models.FileFormat.JSON>
  - name: is_client_secret_in_header
    description: 'Marks if we should send the client secret in header or

      payload, used in Oauth 2.0 flow.'
    types:
    - <xref:bool>
  - name: scope
    description: The OAuth token scope.
    types:
    - <xref:str>
variables:
- description: The authentication type. Required.
  name: auth_type
  types:
  - <xref:str>
- description: The header name which the token is sent with.
  name: api_key_name
  types:
  - <xref:str>
- description: A prefix send in the header before the actual token.
  name: api_key_identifier
  types:
  - <xref:str>
- description: Marks if the key should sent in header.
  name: is_api_key_in_post_payload
  types:
  - <xref:str>
- description: Describes the flow name, for example 'AuthCode' for Oauth 2.0.
  name: flow_name
  types:
  - <xref:str>
- description: The endpoint used to issue a token, used in Oauth 2.0 flow.
  name: token_endpoint
  types:
  - <xref:str>
- description: The endpoint used to authorize the user, used in Oauth 2.0 flow.
  name: authorization_endpoint
  types:
  - <xref:str>
- description: 'The query parameters used in authorization

    request, used in Oauth 2.0 flow.'
  name: authorization_endpoint_query_parameters
  types:
  - <xref:JSON>
- description: 'The redirect endpoint where we will get the authorization code,

    used in Oauth 2.0 flow.'
  name: redirection_endpoint
  types:
  - <xref:str>
- description: The query headers used in token request, used in Oauth 2.0 flow.
  name: token_endpoint_headers
  types:
  - <xref:JSON>
- description: 'The query parameters used in token request, used in

    Oauth 2.0 flow.'
  name: token_endpoint_query_parameters
  types:
  - <xref:JSON>
- description: 'Marks if we should send the client secret in header or

    payload, used in Oauth 2.0 flow.'
  name: is_client_secret_in_header
  types:
  - <xref:bool>
- description: The OAuth token scope.
  name: scope
  types:
  - <xref:str>
methods:
- uid: azure.mgmt.securityinsight.models.CodelessConnectorPollingAuthProperties.as_dict
  name: as_dict
  summary: "Return a dict that can be JSONify using json.dump.\n\nAdvanced usage might\
    \ optionally use a callback as parameter:\n\nKey is the attribute name used in\
    \ Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with the\n\
    msrest type and 'key' with the RestAPI encoded key.\nValue is the current value\
    \ in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: as_dict(keep_readonly=True, key_transformer=<function attribute_transformer>,
    **kwargs)
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.mgmt.securityinsight.models.CodelessConnectorPollingAuthProperties.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: deserialize(data, content_type=None)
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.securityinsight.models.CodelessConnectorPollingAuthProperties.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending()
- uid: azure.mgmt.securityinsight.models.CodelessConnectorPollingAuthProperties.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: from_dict(data, key_extractors=None, content_type=None)
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.securityinsight.models.CodelessConnectorPollingAuthProperties.is_xml_model
  name: is_xml_model
  signature: is_xml_model()
- uid: azure.mgmt.securityinsight.models.CodelessConnectorPollingAuthProperties.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to azure from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: serialize(keep_readonly=False, **kwargs)
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
