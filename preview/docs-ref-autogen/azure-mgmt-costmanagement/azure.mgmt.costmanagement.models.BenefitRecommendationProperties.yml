### YamlMime:PythonClass
uid: azure.mgmt.costmanagement.models.BenefitRecommendationProperties
name: BenefitRecommendationProperties
fullName: azure.mgmt.costmanagement.models.BenefitRecommendationProperties
module: azure.mgmt.costmanagement.models
inheritances:
- azure.mgmt.costmanagement._serialization.Model
summary: 'The properties of the benefit recommendations.


  You probably want to use the sub-classes and not this class directly. Known sub-classes
  are:

  SharedScopeBenefitRecommendationProperties, SingleScopeBenefitRecommendationProperties


  Variables are only populated by the server, and will be ignored when sending a request.


  All required parameters must be populated in order to send to Azure.'
constructor:
  syntax: 'BenefitRecommendationProperties(*, look_back_period: str | _models.LookBackPeriod
    | None = None, usage: _models.RecommendationUsageDetails | None = None, term:
    str | _models.Term | None = None, commitment_granularity: str | _models.Grain
    | None = None, recommendation_details: _models.AllSavingsBenefitDetails | None
    = None, **kwargs)'
  parameters:
  - name: look_back_period
    description: 'The number of days of usage evaluated for computing the

      recommendations. Known values are: "Last7Days", "Last30Days", and "Last60Days".'
    types:
    - <xref:str>
    - <xref:azure.mgmt.costmanagement.models.LookBackPeriod>
  - name: usage
    description: 'On-demand charges between firstConsumptionDate and lastConsumptionDate
      that

      were used for computing benefit recommendations.'
    types:
    - <xref:azure.mgmt.costmanagement.models.RecommendationUsageDetails>
  - name: term
    description: 'Term period of the benefit. For example, P1Y or P3Y. Known values
      are: "P1Y" and

      "P3Y".'
    types:
    - <xref:str>
    - <xref:azure.mgmt.costmanagement.models.Term>
  - name: commitment_granularity
    description: 'Grain of the proposed commitment amount. Supported values:

      ''Hourly''. Known values are: "Hourly", "Daily", and "Monthly".'
    types:
    - <xref:str>
    - <xref:azure.mgmt.costmanagement.models.Grain>
  - name: recommendation_details
    description: The details of the proposed recommendation.
    types:
    - <xref:azure.mgmt.costmanagement.models.AllSavingsBenefitDetails>
variables:
- description: 'The first usage date used for looking back for computing the

    recommendations.'
  name: first_consumption_date
  types:
  - <xref:datetime.datetime>
- description: 'The last usage date used for looking back for computing the

    recommendations.'
  name: last_consumption_date
  types:
  - <xref:datetime.datetime>
- description: 'The number of days of usage evaluated for computing the

    recommendations. Known values are: "Last7Days", "Last30Days", and "Last60Days".'
  name: look_back_period
  types:
  - <xref:str>
  - <xref:azure.mgmt.costmanagement.models.LookBackPeriod>
- description: 'The total hours for which the cost is covered. Its equal to number
    of

    records in a property ''properties/usage/charges''.'
  name: total_hours
  types:
  - <xref:int>
- description: 'On-demand charges between firstConsumptionDate and lastConsumptionDate
    that were

    used for computing benefit recommendations.'
  name: usage
  types:
  - <xref:azure.mgmt.costmanagement.models.RecommendationUsageDetails>
- description: ARM SKU name. 'Compute_Savings_Plan' for SavingsPlan.
  name: arm_sku_name
  types:
  - <xref:str>
- description: 'Term period of the benefit. For example, P1Y or P3Y. Known values
    are: "P1Y" and

    "P3Y".'
  name: term
  types:
  - <xref:str>
  - <xref:azure.mgmt.costmanagement.models.Term>
- description: 'Grain of the proposed commitment amount. Supported values:

    ''Hourly''. Known values are: "Hourly", "Daily", and "Monthly".'
  name: commitment_granularity
  types:
  - <xref:str>
  - <xref:azure.mgmt.costmanagement.models.Grain>
- description: An ISO 4217 currency code identifier for the costs and savings amounts.
  name: currency_code
  types:
  - <xref:str>
- description: 'The current cost without benefit, corresponds to ''totalHours'' in

    the look-back period.'
  name: cost_without_benefit
  types:
  - <xref:float>
- description: The details of the proposed recommendation.
  name: recommendation_details
  types:
  - <xref:azure.mgmt.costmanagement.models.AllSavingsBenefitDetails>
- description: 'The list of all benefit recommendations with the

    recommendation details.'
  name: all_recommendation_details
  types:
  - <xref:azure.mgmt.costmanagement.models.AllSavingsList>
- description: 'Benefit scope. For example, Single or Shared. Required. Known values
    are: "Single"

    and "Shared".'
  name: scope
  types:
  - <xref:str>
  - <xref:azure.mgmt.costmanagement.models.Scope>
methods:
- uid: azure.mgmt.costmanagement.models.BenefitRecommendationProperties.as_dict
  name: as_dict
  summary: "Return a dict that can be JSONify using json.dump.\n\nAdvanced usage might\
    \ optionally use a callback as parameter:\n\nKey is the attribute name used in\
    \ Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with the\n\
    msrest type and 'key' with the RestAPI encoded key.\nValue is the current value\
    \ in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: as_dict(keep_readonly=True, key_transformer=<function attribute_transformer>,
    **kwargs)
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.mgmt.costmanagement.models.BenefitRecommendationProperties.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: deserialize(data, content_type=None)
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.costmanagement.models.BenefitRecommendationProperties.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending()
- uid: azure.mgmt.costmanagement.models.BenefitRecommendationProperties.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: from_dict(data, key_extractors=None, content_type=None)
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.costmanagement.models.BenefitRecommendationProperties.is_xml_model
  name: is_xml_model
  signature: is_xml_model()
- uid: azure.mgmt.costmanagement.models.BenefitRecommendationProperties.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to azure from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: serialize(keep_readonly=False, **kwargs)
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
