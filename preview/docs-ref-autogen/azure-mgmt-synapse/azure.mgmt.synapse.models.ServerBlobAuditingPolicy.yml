### YamlMime:PythonClass
uid: azure.mgmt.synapse.models.ServerBlobAuditingPolicy
name: ServerBlobAuditingPolicy
fullName: azure.mgmt.synapse.models.ServerBlobAuditingPolicy
module: azure.mgmt.synapse.models
inheritances:
- azure.mgmt.synapse.models._models_py3.ProxyResource
summary: 'A server blob auditing policy.


  Variables are only populated by the server, and will be ignored when sending a request.'
constructor:
  syntax: 'ServerBlobAuditingPolicy(*, state: str | _models.BlobAuditingPolicyState
    | None = None, storage_endpoint: str | None = None, storage_account_access_key:
    str | None = None, retention_days: int | None = None, audit_actions_and_groups:
    List[str] | None = None, storage_account_subscription_id: str | None = None, is_storage_secondary_key_in_use:
    bool | None = None, is_azure_monitor_target_enabled: bool | None = None, queue_delay_ms:
    int | None = None, is_devops_audit_enabled: bool | None = None, **kwargs: Any)'
  parameters:
  - name: state
    description: 'Specifies the state of the policy. If state is Enabled, storageEndpoint
      or

      isAzureMonitorTargetEnabled are required. Known values are: "Enabled" and "Disabled".'
    types:
    - <xref:str>
    - <xref:azure.mgmt.synapse.models.BlobAuditingPolicyState>
  - name: storage_endpoint
    description: 'Specifies the blob storage endpoint (e.g.

      [https://MyAccount.blob.core.windows.net](https://MyAccount.blob.core.windows.net)).
      If state is Enabled, storageEndpoint or

      isAzureMonitorTargetEnabled is required.'
    types:
    - <xref:str>
  - name: storage_account_access_key
    description: "Specifies the identifier key of the auditing storage\naccount.\n\
      If state is Enabled and storageEndpoint is specified, not specifying the\nstorageAccountAccessKey\
      \ will use SQL server system-assigned managed identity to access the\nstorage.\n\
      Prerequisites for using managed identity authentication:\n\n1. Assign SQL Server\
      \ a system-assigned managed identity in Azure Active Directory (AAD). \n\n#.\
      \ Grant SQL Server identity access to the storage account by adding 'Storage\
      \ Blob Data\nContributor' RBAC role to the server identity.\n\n   For more information,\
      \ see >>`<<Auditing to storage using Managed Identity authentication\n\n<[https://go.microsoft.com/fwlink/?linkid=2114355](https://go.microsoft.com/fwlink/?linkid=2114355)>`_."
    types:
    - <xref:str>
  - name: retention_days
    description: 'Specifies the number of days to keep in the audit logs in the storage

      account.'
    types:
    - <xref:int>
  - name: audit_actions_and_groups
    description: 'Specifies the Actions-Groups and Actions to audit.


      The recommended set of action groups to use is the following combination - this
      will audit all

      the queries and stored procedures executed against the database, as well as
      successful and

      failed logins:


      BATCH_COMPLETED_GROUP,

      SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,

      FAILED_DATABASE_AUTHENTICATION_GROUP.


      This above combination is also the set that is configured by default when enabling
      auditing

      from the Azure portal.


      The supported action groups to audit are (note: choose only specific groups
      that cover your

      auditing needs. Using unnecessary groups could lead to very large quantities
      of audit records):


      APPLICATION_ROLE_CHANGE_PASSWORD_GROUP

      BACKUP_RESTORE_GROUP

      DATABASE_LOGOUT_GROUP

      DATABASE_OBJECT_CHANGE_GROUP

      DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP

      DATABASE_OBJECT_PERMISSION_CHANGE_GROUP

      DATABASE_OPERATION_GROUP

      DATABASE_PERMISSION_CHANGE_GROUP

      DATABASE_PRINCIPAL_CHANGE_GROUP

      DATABASE_PRINCIPAL_IMPERSONATION_GROUP

      DATABASE_ROLE_MEMBER_CHANGE_GROUP

      FAILED_DATABASE_AUTHENTICATION_GROUP

      SCHEMA_OBJECT_ACCESS_GROUP

      SCHEMA_OBJECT_CHANGE_GROUP

      SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP

      SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP

      SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP

      USER_CHANGE_PASSWORD_GROUP

      BATCH_STARTED_GROUP

      BATCH_COMPLETED_GROUP


      These are groups that cover all sql statements and stored procedures executed
      against the

      database, and should not be used in combination with other groups as this will
      result in

      duplicate audit logs.


      For more information, see [Database-Level Audit Action Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).


      For Database auditing policy, specific Actions can also be specified (note that
      Actions cannot

      be specified for Server auditing policy). The supported actions to audit are:

      SELECT

      UPDATE

      INSERT

      DELETE

      EXECUTE

      RECEIVE

      REFERENCES


      The general form for defining an action to be audited is:

      {action} ON {object} BY {principal}


      Note that `<object>` in the above format can refer to an object like a table,
      view, or

      stored procedure, or an entire database or schema. For the latter cases, the
      forms

      DATABASE::{db_name} and SCHEMA::{schema_name} are used, respectively.


      For example:

      SELECT on dbo.myTable by public

      SELECT on DATABASE::myDatabase by public

      SELECT on SCHEMA::mySchema by public


      For more information, see [Database-Level Audit Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions).'
    types:
    - <xref:azure.mgmt.synapse.aio.operations.AzureADOnlyAuthenticationsOperations.list>[<xref:str>]
  - name: storage_account_subscription_id
    description: Specifies the blob storage subscription Id.
    types:
    - <xref:str>
  - name: is_storage_secondary_key_in_use
    description: 'Specifies whether storageAccountAccessKey value is

      the storage''s secondary key.'
    types:
    - <xref:bool>
  - name: is_azure_monitor_target_enabled
    description: 'Specifies whether audit events are sent to Azure

      Monitor.

      In order to send the events to Azure Monitor, specify ''state'' as ''Enabled''
      and

      ''isAzureMonitorTargetEnabled'' as true.


      When using REST API to configure auditing, Diagnostic Settings with ''SQLSecurityAuditEvents''

      diagnostic logs category on the database should be also created.

      Note that for server level audit you should use the ''master'' database as {databaseName}.


      Diagnostic Settings URI format:

      PUT

      [https://management.azure.com/subscriptions](https://management.azure.com/subscriptions)/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview


      For more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)

      or [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043).'
    types:
    - <xref:bool>
  - name: queue_delay_ms
    description: 'Specifies the amount of time in milliseconds that can elapse before

      audit actions are forced to be processed.

      The default minimum value is 1000 (1 second). The maximum is 2,147,483,647.'
    types:
    - <xref:int>
  - name: is_devops_audit_enabled
    description: 'Specifies the state of devops audit. If state is Enabled,

      devops logs will be sent to Azure Monitor.

      In order to send the events to Azure Monitor, specify ''State'' as ''Enabled'',

      ''IsAzureMonitorTargetEnabled'' as true and ''IsDevopsAuditEnabled'' as true


      When using REST API to configure auditing, Diagnostic Settings with ''DevOpsOperationsAudit''

      diagnostic logs category on the master database should also be created.


      Diagnostic Settings URI format:

      PUT

      [https://management.azure.com/subscriptions](https://management.azure.com/subscriptions)/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/master/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview


      For more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)

      or [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043).'
    types:
    - <xref:bool>
variables:
- description: 'Fully qualified resource ID for the resource. Ex -

    /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.'
  name: id
  types:
  - <xref:str>
- description: The name of the resource.
  name: name
  types:
  - <xref:str>
- description: 'The type of the resource. E.g. "Microsoft.Compute/virtualMachines"
    or

    "Microsoft.Storage/storageAccounts".'
  name: type
  types:
  - <xref:str>
- description: 'Specifies the state of the policy. If state is Enabled, storageEndpoint
    or

    isAzureMonitorTargetEnabled are required. Known values are: "Enabled" and "Disabled".'
  name: state
  types:
  - <xref:str>
  - <xref:azure.mgmt.synapse.models.BlobAuditingPolicyState>
- description: 'Specifies the blob storage endpoint (e.g.

    [https://MyAccount.blob.core.windows.net](https://MyAccount.blob.core.windows.net)).
    If state is Enabled, storageEndpoint or

    isAzureMonitorTargetEnabled is required.'
  name: storage_endpoint
  types:
  - <xref:str>
- description: "Specifies the identifier key of the auditing storage account.\nIf\
    \ state is Enabled and storageEndpoint is specified, not specifying the\nstorageAccountAccessKey\
    \ will use SQL server system-assigned managed identity to access the\nstorage.\n\
    Prerequisites for using managed identity authentication:\n\n1. Assign SQL Server\
    \ a system-assigned managed identity in Azure Active Directory (AAD). \n\n#. Grant\
    \ SQL Server identity access to the storage account by adding 'Storage Blob Data\n\
    Contributor' RBAC role to the server identity.\n\n   For more information, see\
    \ >>`<<Auditing to storage using Managed Identity authentication\n\n<[https://go.microsoft.com/fwlink/?linkid=2114355](https://go.microsoft.com/fwlink/?linkid=2114355)>`_."
  name: storage_account_access_key
  types:
  - <xref:str>
- description: 'Specifies the number of days to keep in the audit logs in the storage

    account.'
  name: retention_days
  types:
  - <xref:int>
- description: 'Specifies the Actions-Groups and Actions to audit.


    The recommended set of action groups to use is the following combination - this
    will audit all

    the queries and stored procedures executed against the database, as well as successful
    and

    failed logins:


    BATCH_COMPLETED_GROUP,

    SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,

    FAILED_DATABASE_AUTHENTICATION_GROUP.


    This above combination is also the set that is configured by default when enabling
    auditing

    from the Azure portal.


    The supported action groups to audit are (note: choose only specific groups that
    cover your

    auditing needs. Using unnecessary groups could lead to very large quantities of
    audit records):


    APPLICATION_ROLE_CHANGE_PASSWORD_GROUP

    BACKUP_RESTORE_GROUP

    DATABASE_LOGOUT_GROUP

    DATABASE_OBJECT_CHANGE_GROUP

    DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP

    DATABASE_OBJECT_PERMISSION_CHANGE_GROUP

    DATABASE_OPERATION_GROUP

    DATABASE_PERMISSION_CHANGE_GROUP

    DATABASE_PRINCIPAL_CHANGE_GROUP

    DATABASE_PRINCIPAL_IMPERSONATION_GROUP

    DATABASE_ROLE_MEMBER_CHANGE_GROUP

    FAILED_DATABASE_AUTHENTICATION_GROUP

    SCHEMA_OBJECT_ACCESS_GROUP

    SCHEMA_OBJECT_CHANGE_GROUP

    SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP

    SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP

    SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP

    USER_CHANGE_PASSWORD_GROUP

    BATCH_STARTED_GROUP

    BATCH_COMPLETED_GROUP


    These are groups that cover all sql statements and stored procedures executed
    against the

    database, and should not be used in combination with other groups as this will
    result in

    duplicate audit logs.


    For more information, see [Database-Level Audit Action Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).


    For Database auditing policy, specific Actions can also be specified (note that
    Actions cannot

    be specified for Server auditing policy). The supported actions to audit are:

    SELECT

    UPDATE

    INSERT

    DELETE

    EXECUTE

    RECEIVE

    REFERENCES


    The general form for defining an action to be audited is:

    {action} ON {object} BY {principal}


    Note that `<object>` in the above format can refer to an object like a table,
    view, or

    stored procedure, or an entire database or schema. For the latter cases, the forms

    DATABASE::{db_name} and SCHEMA::{schema_name} are used, respectively.


    For example:

    SELECT on dbo.myTable by public

    SELECT on DATABASE::myDatabase by public

    SELECT on SCHEMA::mySchema by public


    For more information, see [Database-Level Audit Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions).'
  name: audit_actions_and_groups
  types:
  - <xref:list>[<xref:str>]
- description: Specifies the blob storage subscription Id.
  name: storage_account_subscription_id
  types:
  - <xref:str>
- description: 'Specifies whether storageAccountAccessKey value is the

    storage''s secondary key.'
  name: is_storage_secondary_key_in_use
  types:
  - <xref:bool>
- description: 'Specifies whether audit events are sent to Azure

    Monitor.

    In order to send the events to Azure Monitor, specify ''state'' as ''Enabled''
    and

    ''isAzureMonitorTargetEnabled'' as true.


    When using REST API to configure auditing, Diagnostic Settings with ''SQLSecurityAuditEvents''

    diagnostic logs category on the database should be also created.

    Note that for server level audit you should use the ''master'' database as {databaseName}.


    Diagnostic Settings URI format:

    PUT

    [https://management.azure.com/subscriptions](https://management.azure.com/subscriptions)/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview


    For more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)

    or [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043).'
  name: is_azure_monitor_target_enabled
  types:
  - <xref:bool>
- description: 'Specifies the amount of time in milliseconds that can elapse before
    audit

    actions are forced to be processed.

    The default minimum value is 1000 (1 second). The maximum is 2,147,483,647.'
  name: queue_delay_ms
  types:
  - <xref:int>
- description: 'Specifies the state of devops audit. If state is Enabled, devops

    logs will be sent to Azure Monitor.

    In order to send the events to Azure Monitor, specify ''State'' as ''Enabled'',

    ''IsAzureMonitorTargetEnabled'' as true and ''IsDevopsAuditEnabled'' as true


    When using REST API to configure auditing, Diagnostic Settings with ''DevOpsOperationsAudit''

    diagnostic logs category on the master database should also be created.


    Diagnostic Settings URI format:

    PUT

    [https://management.azure.com/subscriptions](https://management.azure.com/subscriptions)/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/master/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview


    For more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)

    or [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043).'
  name: is_devops_audit_enabled
  types:
  - <xref:bool>
methods:
- uid: azure.mgmt.synapse.models.ServerBlobAuditingPolicy.as_dict
  name: as_dict
  summary: "Return a dict that can be serialized using json.dump.\n\nAdvanced usage\
    \ might optionally use a callback as parameter:\n\nKey is the attribute name used\
    \ in Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with\
    \ the\nmsrest type and 'key' with the RestAPI encoded key.\nValue is the current\
    \ value in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: 'as_dict(keep_readonly: bool = True, key_transformer: ~typing.Callable[[str,
    ~typing.Dict[str, ~typing.Any], ~typing.Any], ~typing.Any] = <function attribute_transformer>,
    **kwargs: ~typing.Any) -> MutableMapping[str, Any]'
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.mgmt.synapse.models.ServerBlobAuditingPolicy.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: 'deserialize(data: Any, content_type: str | None = None) -> ModelType'
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.synapse.models.ServerBlobAuditingPolicy.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending() -> None
- uid: azure.mgmt.synapse.models.ServerBlobAuditingPolicy.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: 'from_dict(data: Any, key_extractors: Callable[[str, Dict[str, Any],
    Any], Any] | None = None, content_type: str | None = None) -> ModelType'
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.synapse.models.ServerBlobAuditingPolicy.is_xml_model
  name: is_xml_model
  signature: is_xml_model() -> bool
- uid: azure.mgmt.synapse.models.ServerBlobAuditingPolicy.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to azure from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: 'serialize(keep_readonly: bool = False, **kwargs: Any) -> MutableMapping[str,
    Any]'
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
