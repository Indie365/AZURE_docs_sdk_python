### YamlMime:PythonClass
uid: azure.mgmt.servicefabricmanagedclusters.models.VaultCertificate
name: VaultCertificate
fullName: azure.mgmt.servicefabricmanagedclusters.models.VaultCertificate
module: azure.mgmt.servicefabricmanagedclusters.models
inheritances:
- azure.mgmt.servicefabricmanagedclusters._serialization.Model
summary: 'Describes a single certificate reference in a Key Vault, and where the certificate
  should reside on the VM.


  All required parameters must be populated in order to send to Azure.'
constructor:
  syntax: 'VaultCertificate(*, certificate_url: str, certificate_store: str, **kwargs)'
  parameters:
  - name: certificate_url
    description: 'This is the URL of a certificate that has been uploaded to Key Vault

      as a secret. For adding a secret to the Key Vault, see [Add a key or secret
      to the key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add).
      In this case, your

      certificate needs to be It is the Base64 encoding of the following JSON Object
      which is encoded

      in UTF-8: `<br>``<br>` {`<br>`

      "data":"`<Base64-encoded-certificate>`",:code:*<br>*  "dataType":"pfx",:code:*<br>*

      "password":"`<pfx-file-password>`"`<br>`}. Required.'
    types:
    - <xref:str>
  - name: certificate_store
    description: 'For Windows VMs, specifies the certificate store on the Virtual

      Machine to which the certificate should be added. The specified certificate
      store is implicitly

      in the LocalMachine account. `<br>``<br>`For Linux VMs, the certificate file
      is

      placed under the /var/lib/waagent directory, with the file name

      :code:`<UppercaseThumbprint>`.crt for the X509 certificate file and

      `<UppercaseThumbprint>`.prv for private key. Both of these files are .pem formatted.

      Required.'
    types:
    - <xref:str>
variables:
- description: 'This is the URL of a certificate that has been uploaded to Key Vault
    as

    a secret. For adding a secret to the Key Vault, see [Add a key or secret to the
    key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add).
    In this case, your

    certificate needs to be It is the Base64 encoding of the following JSON Object
    which is encoded

    in UTF-8: `<br>``<br>` {`<br>`

    "data":"`<Base64-encoded-certificate>`",:code:*<br>*  "dataType":"pfx",:code:*<br>*

    "password":"`<pfx-file-password>`"`<br>`}. Required.'
  name: certificate_url
  types:
  - <xref:str>
- description: 'For Windows VMs, specifies the certificate store on the Virtual

    Machine to which the certificate should be added. The specified certificate store
    is implicitly

    in the LocalMachine account. `<br>``<br>`For Linux VMs, the certificate file is

    placed under the /var/lib/waagent directory, with the file name

    :code:`<UppercaseThumbprint>`.crt for the X509 certificate file and

    `<UppercaseThumbprint>`.prv for private key. Both of these files are .pem formatted.

    Required.'
  name: certificate_store
  types:
  - <xref:str>
methods:
- uid: azure.mgmt.servicefabricmanagedclusters.models.VaultCertificate.as_dict
  name: as_dict
  summary: "Return a dict that can be JSONify using json.dump.\n\nAdvanced usage might\
    \ optionally use a callback as parameter:\n\nKey is the attribute name used in\
    \ Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with the\n\
    msrest type and 'key' with the RestAPI encoded key.\nValue is the current value\
    \ in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: as_dict(keep_readonly=True, key_transformer=<function attribute_transformer>,
    **kwargs)
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.mgmt.servicefabricmanagedclusters.models.VaultCertificate.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: deserialize(data, content_type=None)
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.servicefabricmanagedclusters.models.VaultCertificate.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending()
- uid: azure.mgmt.servicefabricmanagedclusters.models.VaultCertificate.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: from_dict(data, key_extractors=None, content_type=None)
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.servicefabricmanagedclusters.models.VaultCertificate.is_xml_model
  name: is_xml_model
  signature: is_xml_model()
- uid: azure.mgmt.servicefabricmanagedclusters.models.VaultCertificate.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to azure from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: serialize(keep_readonly=False, **kwargs)
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
