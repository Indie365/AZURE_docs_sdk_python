### YamlMime:PythonClass
uid: azure.mgmt.agrifood.models.FarmBeatsSolutionProperties
name: FarmBeatsSolutionProperties
fullName: azure.mgmt.agrifood.models.FarmBeatsSolutionProperties
module: azure.mgmt.agrifood.models
inheritances:
- azure.mgmt.agrifood._serialization.Model
summary: 'FarmBeatsSolution properties.


  Variables are only populated by the server, and will be ignored when sending a request.'
constructor:
  syntax: 'FarmBeatsSolutionProperties(*, marketplace_offer_details: _models.MarketplaceOfferDetails
    | None = None, **kwargs)'
  parameters:
  - name: marketplace_offer_details
    types:
    - <xref:azure.mgmt.agrifood.models.MarketplaceOfferDetails>
variables:
- description: Solution Partner Id.
  name: partner_id
  types:
  - <xref:str>
- description: Solution Partner Tenant Id.
  name: partner_tenant_id
  types:
  - <xref:str>
- description: 'Gets scope of the FarmBeats data access that''s required for

    processing solution request to partner.

    Example: For gdd they might need weatherScope and satelliteScope.'
  name: data_access_scopes
  types:
  - <xref:list>[<xref:str>]
- name: marketplace_offer_details
  types:
  - <xref:azure.mgmt.agrifood.models.MarketplaceOfferDetails>
- description: 'Gets scope of the FarmBeats related parameters that

    need to be validated in apiInputParameters.

    Example: For if ''FarmHierarchy'' is the input scope for ''WeatherScope'' data
    access

    For working with WeatherScope we need FarmHierarchy info implies ''farmerId'',
    ''resourceId'',

    ''resourceType'' in request body.'
  name: input_parameters_validation_scopes
  types:
  - <xref:list>[<xref:azure.mgmt.agrifood.models.ResourceParameter>]
- description: 'Gets apiVersion: Swagger Document Dictionary to capture all

    api versions of swagger exposed by partner to farmbeats.'
  name: open_api_specs_dictionary
  types:
  - <xref:dict>[<xref:str>, <xref:JSON>]
- description: 'Gets example name: insight sample response Dictionary to

    capture all variations of computed results ingested by partner.'
  name: evaluated_outputs_dictionary
  types:
  - <xref:dict>[<xref:str,azure.mgmt.agrifood.models.SolutionEvaluatedOutput>]
- description: 'Application id of the multi tenant application to be used by

    partner to access FarmBeats data.'
  name: access_fb_application_id
  types:
  - <xref:str>
- description: Role Id of the SaaS multi tenant application to access relevant fb
    data.
  name: role_id
  types:
  - <xref:str>
- description: Role Name of the SaaS multi tenant application to access relevant fb
    data.
  name: role_name
  types:
  - <xref:str>
- description: 'Application name of the multi tenant application to be used

    by partner to access FarmBeatsData.'
  name: access_fb_application_name
  types:
  - <xref:str>
methods:
- uid: azure.mgmt.agrifood.models.FarmBeatsSolutionProperties.as_dict
  name: as_dict
  summary: "Return a dict that can be JSONify using json.dump.\n\nAdvanced usage might\
    \ optionally use a callback as parameter:\n\nKey is the attribute name used in\
    \ Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with the\n\
    msrest type and 'key' with the RestAPI encoded key.\nValue is the current value\
    \ in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: as_dict(keep_readonly=True, key_transformer=<function attribute_transformer>,
    **kwargs)
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.mgmt.agrifood.models.FarmBeatsSolutionProperties.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: deserialize(data, content_type=None)
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.agrifood.models.FarmBeatsSolutionProperties.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending()
- uid: azure.mgmt.agrifood.models.FarmBeatsSolutionProperties.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: from_dict(data, key_extractors=None, content_type=None)
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.agrifood.models.FarmBeatsSolutionProperties.is_xml_model
  name: is_xml_model
  signature: is_xml_model()
- uid: azure.mgmt.agrifood.models.FarmBeatsSolutionProperties.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to azure from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: serialize(keep_readonly=False, **kwargs)
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
