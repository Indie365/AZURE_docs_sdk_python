### YamlMime:PythonClass
uid: azure.mgmt.batch.models.NetworkConfiguration
name: NetworkConfiguration
fullName: azure.mgmt.batch.models.NetworkConfiguration
module: azure.mgmt.batch.models
inheritances:
- azure.mgmt.batch._serialization.Model
summary: The network configuration for a pool.
constructor:
  syntax: 'NetworkConfiguration(*, subnet_id: str | None = None, dynamic_vnet_assignment_scope:
    str | _models.DynamicVNetAssignmentScope | None = None, endpoint_configuration:
    _models.PoolEndpointConfiguration | None = None, public_ip_address_configuration:
    _models.PublicIPAddressConfiguration | None = None, **kwargs)'
  parameters:
  - name: subnet_id
    description: 'The virtual network must be in the same region and subscription
      as the

      Azure Batch account. The specified subnet should have enough free IP addresses
      to accommodate

      the number of nodes in the pool. If the subnet doesn''t have enough free IP
      addresses, the pool

      will partially allocate compute nodes and a resize error will occur. The ''MicrosoftAzureBatch''

      service principal must have the ''Classic Virtual Machine Contributor'' Role-Based
      Access Control

      (RBAC) role for the specified VNet. The specified subnet must allow communication
      from the

      Azure Batch service to be able to schedule tasks on the compute nodes. This
      can be verified by

      checking if the specified VNet has any associated Network Security Groups (NSG).
      If

      communication to the compute nodes in the specified subnet is denied by an NSG,
      then the Batch

      service will set the state of the compute nodes to unusable. If the specified
      VNet has any

      associated Network Security Groups (NSG), then a few reserved system ports must
      be enabled for

      inbound communication. For pools created with a virtual machine configuration,
      enable ports

      29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For
      pools created with

      a cloud service configuration, enable ports 10100, 20100, and 30100. Also enable
      outbound

      connections to Azure Storage on port 443. For cloudServiceConfiguration pools,
      only ''classic''

      VNETs are supported. For more details see:

      [https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration](https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration).'
    types:
    - <xref:str>
  - name: dynamic_vnet_assignment_scope
    description: 'The scope of dynamic vnet assignment. Known values are:

      "none" and "job".'
    types:
    - <xref:str>
    - <xref:azure.mgmt.batch.models.DynamicVNetAssignmentScope>
  - name: endpoint_configuration
    description: 'Pool endpoint configuration is only supported on pools with

      the virtualMachineConfiguration property.'
    types:
    - <xref:azure.mgmt.batch.models.PoolEndpointConfiguration>
  - name: public_ip_address_configuration
    description: 'This property is only supported on Pools with the

      virtualMachineConfiguration property.'
    types:
    - <xref:azure.mgmt.batch.models.PublicIPAddressConfiguration>
variables:
- description: 'The virtual network must be in the same region and subscription as
    the Azure

    Batch account. The specified subnet should have enough free IP addresses to accommodate
    the

    number of nodes in the pool. If the subnet doesn''t have enough free IP addresses,
    the pool will

    partially allocate compute nodes and a resize error will occur. The ''MicrosoftAzureBatch''

    service principal must have the ''Classic Virtual Machine Contributor'' Role-Based
    Access Control

    (RBAC) role for the specified VNet. The specified subnet must allow communication
    from the

    Azure Batch service to be able to schedule tasks on the compute nodes. This can
    be verified by

    checking if the specified VNet has any associated Network Security Groups (NSG).
    If

    communication to the compute nodes in the specified subnet is denied by an NSG,
    then the Batch

    service will set the state of the compute nodes to unusable. If the specified
    VNet has any

    associated Network Security Groups (NSG), then a few reserved system ports must
    be enabled for

    inbound communication. For pools created with a virtual machine configuration,
    enable ports

    29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For pools
    created with

    a cloud service configuration, enable ports 10100, 20100, and 30100. Also enable
    outbound

    connections to Azure Storage on port 443. For cloudServiceConfiguration pools,
    only ''classic''

    VNETs are supported. For more details see:

    [https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration](https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration).'
  name: subnet_id
  types:
  - <xref:str>
- description: 'The scope of dynamic vnet assignment. Known values are:

    "none" and "job".'
  name: dynamic_vnet_assignment_scope
  types:
  - <xref:str>
  - <xref:azure.mgmt.batch.models.DynamicVNetAssignmentScope>
- description: 'Pool endpoint configuration is only supported on pools with the

    virtualMachineConfiguration property.'
  name: endpoint_configuration
  types:
  - <xref:azure.mgmt.batch.models.PoolEndpointConfiguration>
- description: 'This property is only supported on Pools with the

    virtualMachineConfiguration property.'
  name: public_ip_address_configuration
  types:
  - <xref:azure.mgmt.batch.models.PublicIPAddressConfiguration>
methods:
- uid: azure.mgmt.batch.models.NetworkConfiguration.as_dict
  name: as_dict
  summary: "Return a dict that can be JSONify using json.dump.\n\nAdvanced usage might\
    \ optionally use a callback as parameter:\n\nKey is the attribute name used in\
    \ Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with the\n\
    msrest type and 'key' with the RestAPI encoded key.\nValue is the current value\
    \ in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: as_dict(keep_readonly=True, key_transformer=<function attribute_transformer>,
    **kwargs)
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.mgmt.batch.models.NetworkConfiguration.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: deserialize(data, content_type=None)
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.batch.models.NetworkConfiguration.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending()
- uid: azure.mgmt.batch.models.NetworkConfiguration.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: from_dict(data, key_extractors=None, content_type=None)
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.batch.models.NetworkConfiguration.is_xml_model
  name: is_xml_model
  signature: is_xml_model()
- uid: azure.mgmt.batch.models.NetworkConfiguration.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to azure from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: serialize(keep_readonly=False, **kwargs)
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
