### YamlMime:PythonClass
uid: azure.mgmt.batch.models.CertificateReference
name: CertificateReference
fullName: azure.mgmt.batch.models.CertificateReference
module: azure.mgmt.batch.models
inheritances:
- azure.mgmt.batch._serialization.Model
summary: 'Warning: This object is deprecated and will be removed after February, 2024.
  Please use the [Azure KeyVault Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide)
  instead.


  All required parameters must be populated in order to send to Azure.'
constructor:
  syntax: 'CertificateReference(*, id: str, store_location: str | _models.CertificateStoreLocation
    | None = None, store_name: str | None = None, visibility: List[str | _models.CertificateVisibility]
    | None = None, **kwargs)'
  parameters:
  - name: id
    description: 'The fully qualified ID of the certificate to install on the pool.
      This must be

      inside the same batch account as the pool. Required.'
    types:
    - <xref:str>
  - name: store_location
    description: 'The default value is currentUser. This property is applicable only
      for

      pools configured with Windows nodes (that is, created with cloudServiceConfiguration,
      or with

      virtualMachineConfiguration using a Windows image reference). For Linux compute
      nodes, the

      certificates are stored in a directory inside the task working directory and
      an environment

      variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this
      location. For

      certificates with visibility of ''remoteUser'', a ''certs'' directory is created
      in the user''s home

      directory (e.g., /home/{user-name}/certs) and certificates are placed in that
      directory. Known

      values are: "CurrentUser" and "LocalMachine".'
    types:
    - <xref:str>
    - <xref:azure.mgmt.batch.models.CertificateStoreLocation>
  - name: store_name
    description: 'This property is applicable only for pools configured with Windows
      nodes

      (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration
      using a

      Windows image reference). Common store names include: My, Root, CA, Trust, Disallowed,

      TrustedPeople, TrustedPublisher, AuthRoot, AddressBook, but any custom store
      name can also be

      used. The default value is My.'
    types:
    - <xref:str>
  - name: visibility
    description: 'Which user accounts on the compute node should have access to the
      private

      data of the certificate.'
    types:
    - <xref:azure.mgmt.batch.aio.operations.ApplicationOperations.list>[<xref:str>
    - <xref:azure.mgmt.batch.models.CertificateVisibility>]
variables:
- description: 'The fully qualified ID of the certificate to install on the pool.
    This must be inside

    the same batch account as the pool. Required.'
  name: id
  types:
  - <xref:str>
- description: 'The default value is currentUser. This property is applicable only
    for

    pools configured with Windows nodes (that is, created with cloudServiceConfiguration,
    or with

    virtualMachineConfiguration using a Windows image reference). For Linux compute
    nodes, the

    certificates are stored in a directory inside the task working directory and an
    environment

    variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location.
    For

    certificates with visibility of ''remoteUser'', a ''certs'' directory is created
    in the user''s home

    directory (e.g., /home/{user-name}/certs) and certificates are placed in that
    directory. Known

    values are: "CurrentUser" and "LocalMachine".'
  name: store_location
  types:
  - <xref:str>
  - <xref:azure.mgmt.batch.models.CertificateStoreLocation>
- description: 'This property is applicable only for pools configured with Windows
    nodes

    (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration
    using a

    Windows image reference). Common store names include: My, Root, CA, Trust, Disallowed,

    TrustedPeople, TrustedPublisher, AuthRoot, AddressBook, but any custom store name
    can also be

    used. The default value is My.'
  name: store_name
  types:
  - <xref:str>
- description: 'Which user accounts on the compute node should have access to the
    private

    data of the certificate.'
  name: visibility
  types:
  - <xref:list>[<xref:str>
  - <xref:azure.mgmt.batch.models.CertificateVisibility>]
methods:
- uid: azure.mgmt.batch.models.CertificateReference.as_dict
  name: as_dict
  summary: "Return a dict that can be JSONify using json.dump.\n\nAdvanced usage might\
    \ optionally use a callback as parameter:\n\nKey is the attribute name used in\
    \ Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with the\n\
    msrest type and 'key' with the RestAPI encoded key.\nValue is the current value\
    \ in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: as_dict(keep_readonly=True, key_transformer=<function attribute_transformer>,
    **kwargs)
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.mgmt.batch.models.CertificateReference.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: deserialize(data, content_type=None)
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.batch.models.CertificateReference.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending()
- uid: azure.mgmt.batch.models.CertificateReference.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: from_dict(data, key_extractors=None, content_type=None)
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.batch.models.CertificateReference.is_xml_model
  name: is_xml_model
  signature: is_xml_model()
- uid: azure.mgmt.batch.models.CertificateReference.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to azure from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: serialize(keep_readonly=False, **kwargs)
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
