### YamlMime:PythonClass
uid: azure.mgmt.batch.models.StartTask
name: StartTask
fullName: azure.mgmt.batch.models.StartTask
module: azure.mgmt.batch.models
inheritances:
- azure.mgmt.batch._serialization.Model
summary: In some cases the start task may be re-run even though the node was not rebooted.
  Due to this, start tasks should be idempotent and exit gracefully if the setup they're
  performing has already been done. Special care should be taken to avoid start tasks
  which create breakaway process or install/launch services from the start task working
  directory, as this will block Batch from being able to re-run the start task.
constructor:
  syntax: 'StartTask(*, command_line: str | None = None, resource_files: List[_models.ResourceFile]
    | None = None, environment_settings: List[_models.EnvironmentSetting] | None =
    None, user_identity: _models.UserIdentity | None = None, max_task_retry_count:
    int | None = None, wait_for_success: bool | None = None, container_settings: _models.TaskContainerSettings
    | None = None, **kwargs)'
  parameters:
  - name: command_line
    description: 'The command line does not run under a shell, and therefore cannot
      take

      advantage of shell features such as environment variable expansion. If you want
      to take

      advantage of such features, you should invoke the shell in the command line,
      for example using

      "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. Required if
      any other

      properties of the startTask are specified.'
    types:
    - <xref:str>
  - name: resource_files
    description: 'A list of files that the Batch service will download to the compute

      node before running the command line.'
    types:
    - <xref:azure.mgmt.batch.aio.operations.ApplicationOperations.list>[<xref:azure.mgmt.batch.models.ResourceFile>]
  - name: environment_settings
    description: A list of environment variable settings for the start task.
    types:
    - <xref:azure.mgmt.batch.aio.operations.ApplicationOperations.list>[<xref:azure.mgmt.batch.models.EnvironmentSetting>]
  - name: user_identity
    description: 'If omitted, the task runs as a non-administrative user unique to
      the

      task.'
    types:
    - <xref:azure.mgmt.batch.models.UserIdentity>
  - name: max_task_retry_count
    description: 'The Batch service retries a task if its exit code is nonzero.

      Note that this value specifically controls the number of retries. The Batch
      service will try

      the task once, and may then retry up to this limit. For example, if the maximum
      retry count is

      3, Batch tries the task up to 4 times (one initial try and 3 retries). If the
      maximum retry

      count is 0, the Batch service does not retry the task. If the maximum retry
      count is -1, the

      Batch service retries the task without limit.'
    types:
    - <xref:int>
  - name: wait_for_success
    description: 'If true and the start task fails on a compute node, the Batch

      service retries the start task up to its maximum retry count (maxTaskRetryCount).
      If the task

      has still not completed successfully after all retries, then the Batch service
      marks the

      compute node unusable, and will not schedule tasks to it. This condition can
      be detected via

      the node state and scheduling error detail. If false, the Batch service will
      not wait for the

      start task to complete. In this case, other tasks can start executing on the
      compute node while

      the start task is still running; and even if the start task fails, new tasks
      will continue to

      be scheduled on the node. The default is true.'
    types:
    - <xref:bool>
  - name: container_settings
    description: 'When this is specified, all directories recursively below the

      AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are
      mapped into the

      container, all task environment variables are mapped into the container, and
      the task command

      line is executed in the container.'
    types:
    - <xref:azure.mgmt.batch.models.TaskContainerSettings>
variables:
- description: 'The command line does not run under a shell, and therefore cannot
    take

    advantage of shell features such as environment variable expansion. If you want
    to take

    advantage of such features, you should invoke the shell in the command line, for
    example using

    "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. Required if
    any other

    properties of the startTask are specified.'
  name: command_line
  types:
  - <xref:str>
- description: 'A list of files that the Batch service will download to the compute
    node

    before running the command line.'
  name: resource_files
  types:
  - <xref:list>[<xref:azure.mgmt.batch.models.ResourceFile>]
- description: A list of environment variable settings for the start task.
  name: environment_settings
  types:
  - <xref:list>[<xref:azure.mgmt.batch.models.EnvironmentSetting>]
- description: If omitted, the task runs as a non-administrative user unique to the
    task.
  name: user_identity
  types:
  - <xref:azure.mgmt.batch.models.UserIdentity>
- description: 'The Batch service retries a task if its exit code is nonzero. Note

    that this value specifically controls the number of retries. The Batch service
    will try the

    task once, and may then retry up to this limit. For example, if the maximum retry
    count is 3,

    Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum
    retry count

    is 0, the Batch service does not retry the task. If the maximum retry count is
    -1, the Batch

    service retries the task without limit.'
  name: max_task_retry_count
  types:
  - <xref:int>
- description: 'If true and the start task fails on a compute node, the Batch service

    retries the start task up to its maximum retry count (maxTaskRetryCount). If the
    task has still

    not completed successfully after all retries, then the Batch service marks the
    compute node

    unusable, and will not schedule tasks to it. This condition can be detected via
    the node state

    and scheduling error detail. If false, the Batch service will not wait for the
    start task to

    complete. In this case, other tasks can start executing on the compute node while
    the start

    task is still running; and even if the start task fails, new tasks will continue
    to be

    scheduled on the node. The default is true.'
  name: wait_for_success
  types:
  - <xref:bool>
- description: 'When this is specified, all directories recursively below the

    AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped
    into the

    container, all task environment variables are mapped into the container, and the
    task command

    line is executed in the container.'
  name: container_settings
  types:
  - <xref:azure.mgmt.batch.models.TaskContainerSettings>
methods:
- uid: azure.mgmt.batch.models.StartTask.as_dict
  name: as_dict
  summary: "Return a dict that can be JSONify using json.dump.\n\nAdvanced usage might\
    \ optionally use a callback as parameter:\n\nKey is the attribute name used in\
    \ Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with the\n\
    msrest type and 'key' with the RestAPI encoded key.\nValue is the current value\
    \ in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: as_dict(keep_readonly=True, key_transformer=<function attribute_transformer>,
    **kwargs)
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.mgmt.batch.models.StartTask.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: deserialize(data, content_type=None)
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.batch.models.StartTask.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending()
- uid: azure.mgmt.batch.models.StartTask.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: from_dict(data, key_extractors=None, content_type=None)
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.batch.models.StartTask.is_xml_model
  name: is_xml_model
  signature: is_xml_model()
- uid: azure.mgmt.batch.models.StartTask.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to azure from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: serialize(keep_readonly=False, **kwargs)
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
