### YamlMime:PythonClass
uid: azure.mgmt.compute.v2021_11_01.models.DiffDiskSettings
name: DiffDiskSettings
fullName: azure.mgmt.compute.v2021_11_01.models.DiffDiskSettings
module: azure.mgmt.compute.v2021_11_01.models
inheritances:
- azure.mgmt.compute._serialization.Model
summary: 'Describes the parameters of ephemeral disk settings that can be specified
  for operating system disk. `<br>``<br>` NOTE: The ephemeral disk settings can only
  be specified for managed disk.'
constructor:
  syntax: 'DiffDiskSettings(*, option: str | _models.DiffDiskOptions | None = None,
    placement: str | _models.DiffDiskPlacement | None = None, **kwargs)'
  parameters:
  - name: option
    description: Specifies the ephemeral disk settings for operating system disk.
      "Local"
    types:
    - <xref:str>
    - <xref:azure.mgmt.compute.v2021_11_01.models.DiffDiskOptions>
  - name: placement
    description: 'Specifies the ephemeral disk placement for operating system

      disk.:code:*<br>*`<br>` Possible values are: `<br>``<br>` **CacheDisk**

      `<br>``<br>` **ResourceDisk** `<br>``<br>` Default: **CacheDisk** if

      one is configured for the VM size otherwise **ResourceDisk** is used.:code:*<br>*`<br>`

      Refer to VM size documentation for Windows VM at

      [https://docs.microsoft.com/azure/virtual-machines/windows/sizes](https://docs.microsoft.com/azure/virtual-machines/windows/sizes)
      and Linux VM at

      [https://docs.microsoft.com/azure/virtual-machines/linux/sizes](https://docs.microsoft.com/azure/virtual-machines/linux/sizes)
      to check which VM sizes exposes a

      cache disk. Known values are: "CacheDisk" and "ResourceDisk".'
    types:
    - <xref:str>
    - <xref:azure.mgmt.compute.v2021_11_01.models.DiffDiskPlacement>
variables:
- description: Specifies the ephemeral disk settings for operating system disk. "Local"
  name: option
  types:
  - <xref:str>
  - <xref:azure.mgmt.compute.v2021_11_01.models.DiffDiskOptions>
- description: 'Specifies the ephemeral disk placement for operating system

    disk.:code:*<br>*`<br>` Possible values are: `<br>``<br>` **CacheDisk**

    `<br>``<br>` **ResourceDisk** `<br>``<br>` Default: **CacheDisk** if

    one is configured for the VM size otherwise **ResourceDisk** is used.:code:*<br>*`<br>`

    Refer to VM size documentation for Windows VM at

    [https://docs.microsoft.com/azure/virtual-machines/windows/sizes](https://docs.microsoft.com/azure/virtual-machines/windows/sizes)
    and Linux VM at

    [https://docs.microsoft.com/azure/virtual-machines/linux/sizes](https://docs.microsoft.com/azure/virtual-machines/linux/sizes)
    to check which VM sizes exposes a

    cache disk. Known values are: "CacheDisk" and "ResourceDisk".'
  name: placement
  types:
  - <xref:str>
  - <xref:azure.mgmt.compute.v2021_11_01.models.DiffDiskPlacement>
methods:
- uid: azure.mgmt.compute.v2021_11_01.models.DiffDiskSettings.as_dict
  name: as_dict
  summary: "Return a dict that can be JSONify using json.dump.\n\nAdvanced usage might\
    \ optionally use a callback as parameter:\n\nKey is the attribute name used in\
    \ Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with the\n\
    msrest type and 'key' with the RestAPI encoded key.\nValue is the current value\
    \ in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: as_dict(keep_readonly=True, key_transformer=<function attribute_transformer>,
    **kwargs)
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.mgmt.compute.v2021_11_01.models.DiffDiskSettings.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: deserialize(data, content_type=None)
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.compute.v2021_11_01.models.DiffDiskSettings.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending()
- uid: azure.mgmt.compute.v2021_11_01.models.DiffDiskSettings.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: from_dict(data, key_extractors=None, content_type=None)
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.compute.v2021_11_01.models.DiffDiskSettings.is_xml_model
  name: is_xml_model
  signature: is_xml_model()
- uid: azure.mgmt.compute.v2021_11_01.models.DiffDiskSettings.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to azure from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: serialize(keep_readonly=False, **kwargs)
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
