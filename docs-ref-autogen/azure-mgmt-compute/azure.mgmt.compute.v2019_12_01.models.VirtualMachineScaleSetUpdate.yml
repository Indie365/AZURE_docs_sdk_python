### YamlMime:PythonClass
uid: azure.mgmt.compute.v2019_12_01.models.VirtualMachineScaleSetUpdate
name: VirtualMachineScaleSetUpdate
fullName: azure.mgmt.compute.v2019_12_01.models.VirtualMachineScaleSetUpdate
module: azure.mgmt.compute.v2019_12_01.models
inheritances:
- azure.mgmt.compute.v2019_12_01.models._models_py3.UpdateResource
summary: Describes a Virtual Machine Scale Set.
constructor:
  syntax: 'VirtualMachineScaleSetUpdate(*, tags: Dict[str, str] | None = None, sku:
    _models.Sku | None = None, plan: _models.Plan | None = None, identity: _models.VirtualMachineScaleSetIdentity
    | None = None, upgrade_policy: _models.UpgradePolicy | None = None, automatic_repairs_policy:
    _models.AutomaticRepairsPolicy | None = None, virtual_machine_profile: _models.VirtualMachineScaleSetUpdateVMProfile
    | None = None, overprovision: bool | None = None, do_not_run_extensions_on_overprovisioned_v_ms:
    bool | None = None, single_placement_group: bool | None = None, additional_capabilities:
    _models.AdditionalCapabilities | None = None, scale_in_policy: _models.ScaleInPolicy
    | None = None, proximity_placement_group: _models.SubResource | None = None, **kwargs)'
  parameters:
  - name: tags
    description: Resource tags.
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  - name: sku
    description: The virtual machine scale set sku.
    types:
    - <xref:azure.mgmt.compute.v2019_12_01.models.Sku>
  - name: plan
    description: 'The purchase plan when deploying a virtual machine scale set from
      VM Marketplace

      images.'
    types:
    - <xref:azure.mgmt.compute.v2019_12_01.models.Plan>
  - name: identity
    description: The identity of the virtual machine scale set, if configured.
    types:
    - <xref:azure.mgmt.compute.v2019_12_01.models.VirtualMachineScaleSetIdentity>
  - name: upgrade_policy
    description: The upgrade policy.
    types:
    - <xref:azure.mgmt.compute.v2019_12_01.models.UpgradePolicy>
  - name: automatic_repairs_policy
    description: Policy for automatic repairs.
    types:
    - <xref:azure.mgmt.compute.v2019_12_01.models.AutomaticRepairsPolicy>
  - name: virtual_machine_profile
    description: The virtual machine profile.
    types:
    - <xref:azure.mgmt.compute.v2019_12_01.models.VirtualMachineScaleSetUpdateVMProfile>
  - name: overprovision
    description: 'Specifies whether the Virtual Machine Scale Set should be

      overprovisioned.'
    types:
    - <xref:bool>
  - name: do_not_run_extensions_on_overprovisioned_v_ms
    description: 'When Overprovision is enabled,

      extensions are launched only on the requested number of VMs which are finally
      kept. This

      property will hence ensure that the extensions do not run on the extra overprovisioned
      VMs.'
    types:
    - <xref:bool>
  - name: single_placement_group
    description: 'When true this limits the scale set to a single placement

      group, of max size 100 virtual machines. NOTE: If singlePlacementGroup is true,
      it may be

      modified to false. However, if singlePlacementGroup is false, it may not be
      modified to true.'
    types:
    - <xref:bool>
  - name: additional_capabilities
    description: 'Specifies additional capabilities enabled or disabled on the

      Virtual Machines in the Virtual Machine Scale Set. For instance: whether the
      Virtual Machines

      have the capability to support attaching managed data disks with UltraSSD_LRS
      storage account

      type.'
    types:
    - <xref:azure.mgmt.compute.v2019_12_01.models.AdditionalCapabilities>
  - name: scale_in_policy
    description: 'Specifies the scale-in policy that decides which virtual machines
      are

      chosen for removal when a Virtual Machine Scale Set is scaled-in.'
    types:
    - <xref:azure.mgmt.compute.v2019_12_01.models.ScaleInPolicy>
  - name: proximity_placement_group
    description: 'Specifies information about the proximity placement group

      that the virtual machine scale set should be assigned to. `<br>`:code:>>`<<<br>`Minimum

      api-version: 2018-04-01.'
    types:
    - <xref:azure.mgmt.compute.v2019_12_01.models.SubResource>
variables:
- description: Resource tags.
  name: tags
  types:
  - <xref:dict>[<xref:str>, <xref:str>]
- description: The virtual machine scale set sku.
  name: sku
  types:
  - <xref:azure.mgmt.compute.v2019_12_01.models.Sku>
- description: 'The purchase plan when deploying a virtual machine scale set from
    VM Marketplace

    images.'
  name: plan
  types:
  - <xref:azure.mgmt.compute.v2019_12_01.models.Plan>
- description: The identity of the virtual machine scale set, if configured.
  name: identity
  types:
  - <xref:azure.mgmt.compute.v2019_12_01.models.VirtualMachineScaleSetIdentity>
- description: The upgrade policy.
  name: upgrade_policy
  types:
  - <xref:azure.mgmt.compute.v2019_12_01.models.UpgradePolicy>
- description: Policy for automatic repairs.
  name: automatic_repairs_policy
  types:
  - <xref:azure.mgmt.compute.v2019_12_01.models.AutomaticRepairsPolicy>
- description: The virtual machine profile.
  name: virtual_machine_profile
  types:
  - <xref:azure.mgmt.compute.v2019_12_01.models.VirtualMachineScaleSetUpdateVMProfile>
- description: Specifies whether the Virtual Machine Scale Set should be overprovisioned.
  name: overprovision
  types:
  - <xref:bool>
- description: 'When Overprovision is enabled, extensions

    are launched only on the requested number of VMs which are finally kept. This
    property will

    hence ensure that the extensions do not run on the extra overprovisioned VMs.'
  name: do_not_run_extensions_on_overprovisioned_v_ms
  types:
  - <xref:bool>
- description: 'When true this limits the scale set to a single placement group,

    of max size 100 virtual machines. NOTE: If singlePlacementGroup is true, it may
    be modified to

    false. However, if singlePlacementGroup is false, it may not be modified to true.'
  name: single_placement_group
  types:
  - <xref:bool>
- description: 'Specifies additional capabilities enabled or disabled on the

    Virtual Machines in the Virtual Machine Scale Set. For instance: whether the Virtual
    Machines

    have the capability to support attaching managed data disks with UltraSSD_LRS
    storage account

    type.'
  name: additional_capabilities
  types:
  - <xref:azure.mgmt.compute.v2019_12_01.models.AdditionalCapabilities>
- description: 'Specifies the scale-in policy that decides which virtual machines
    are

    chosen for removal when a Virtual Machine Scale Set is scaled-in.'
  name: scale_in_policy
  types:
  - <xref:azure.mgmt.compute.v2019_12_01.models.ScaleInPolicy>
- description: 'Specifies information about the proximity placement group that

    the virtual machine scale set should be assigned to. `<br>`:code:>>`<<<br>`Minimum

    api-version: 2018-04-01.'
  name: proximity_placement_group
  types:
  - <xref:azure.mgmt.compute.v2019_12_01.models.SubResource>
methods:
- uid: azure.mgmt.compute.v2019_12_01.models.VirtualMachineScaleSetUpdate.as_dict
  name: as_dict
  summary: "Return a dict that can be JSONify using json.dump.\n\nAdvanced usage might\
    \ optionally use a callback as parameter:\n\nKey is the attribute name used in\
    \ Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with the\n\
    msrest type and 'key' with the RestAPI encoded key.\nValue is the current value\
    \ in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: as_dict(keep_readonly=True, key_transformer=<function attribute_transformer>,
    **kwargs)
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.mgmt.compute.v2019_12_01.models.VirtualMachineScaleSetUpdate.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: deserialize(data, content_type=None)
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.compute.v2019_12_01.models.VirtualMachineScaleSetUpdate.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending()
- uid: azure.mgmt.compute.v2019_12_01.models.VirtualMachineScaleSetUpdate.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: from_dict(data, key_extractors=None, content_type=None)
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.compute.v2019_12_01.models.VirtualMachineScaleSetUpdate.is_xml_model
  name: is_xml_model
  signature: is_xml_model()
- uid: azure.mgmt.compute.v2019_12_01.models.VirtualMachineScaleSetUpdate.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to azure from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: serialize(keep_readonly=False, **kwargs)
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
