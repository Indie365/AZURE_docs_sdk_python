### YamlMime:PythonClass
uid: azure.mgmt.storagecache.models.NfsAccessRule
name: NfsAccessRule
fullName: azure.mgmt.storagecache.models.NfsAccessRule
module: azure.mgmt.storagecache.models
inheritances:
- azure.mgmt.storagecache._serialization.Model
summary: 'Rule to place restrictions on portions of the cache namespace being presented
  to clients.


  All required parameters must be populated in order to send to Azure.'
constructor:
  syntax: 'NfsAccessRule(*, scope: str | _models.NfsAccessRuleScope, access: str |
    _models.NfsAccessRuleAccess, filter: str | None = None, suid: bool | None = None,
    submount_access: bool | None = None, root_squash: bool | None = None, anonymous_uid:
    str | None = None, anonymous_gid: str | None = None, **kwargs: Any)'
  parameters:
  - name: scope
    description: 'Scope for this rule. The scope and filter determine which clients
      match the

      rule. Required. Known values are: "default", "network", and "host".'
    types:
    - <xref:str>
    - <xref:azure.mgmt.storagecache.models.NfsAccessRuleScope>
  - name: filter
    description: 'Filter applied to the scope for this rule. The filter''s format
      depends on its

      scope. ''default'' scope matches all clients and has no filter value. ''network''
      scope takes a

      filter in CIDR format (for example, 10.99.1.0/24). ''host'' takes an IP address
      or fully

      qualified domain name as filter. If a client does not match any filter rule
      and there is no

      default rule, access is denied.'
    types:
    - <xref:str>
  - name: access
    description: 'Access allowed by this rule. Required. Known values are: "no", "ro",
      and "rw".'
    types:
    - <xref:str>
    - <xref:azure.mgmt.storagecache.models.NfsAccessRuleAccess>
  - name: suid
    description: Allow SUID semantics.
    types:
    - <xref:bool>
  - name: submount_access
    description: 'For the default policy, allow access to subdirectories under the
      root

      export. If this is set to no, clients can only mount the path ''/''. If set
      to yes, clients can

      mount a deeper path, like ''/a/b''.'
    types:
    - <xref:bool>
  - name: root_squash
    description: Map root accesses to anonymousUID and anonymousGID.
    types:
    - <xref:bool>
  - name: anonymous_uid
    description: 'UID value that replaces 0 when rootSquash is true. 65534 will be
      used

      if not provided.'
    types:
    - <xref:str>
  - name: anonymous_gid
    description: 'GID value that replaces 0 when rootSquash is true. This will use
      the

      value of anonymousUID if not provided.'
    types:
    - <xref:str>
variables:
- description: 'Scope for this rule. The scope and filter determine which clients
    match the rule.

    Required. Known values are: "default", "network", and "host".'
  name: scope
  types:
  - <xref:str>
  - <xref:azure.mgmt.storagecache.models.NfsAccessRuleScope>
- description: 'Filter applied to the scope for this rule. The filter''s format depends
    on its

    scope. ''default'' scope matches all clients and has no filter value. ''network''
    scope takes a

    filter in CIDR format (for example, 10.99.1.0/24). ''host'' takes an IP address
    or fully

    qualified domain name as filter. If a client does not match any filter rule and
    there is no

    default rule, access is denied.'
  name: filter
  types:
  - <xref:str>
- description: 'Access allowed by this rule. Required. Known values are: "no", "ro",
    and "rw".'
  name: access
  types:
  - <xref:str>
  - <xref:azure.mgmt.storagecache.models.NfsAccessRuleAccess>
- description: Allow SUID semantics.
  name: suid
  types:
  - <xref:bool>
- description: 'For the default policy, allow access to subdirectories under the root

    export. If this is set to no, clients can only mount the path ''/''. If set to
    yes, clients can

    mount a deeper path, like ''/a/b''.'
  name: submount_access
  types:
  - <xref:bool>
- description: Map root accesses to anonymousUID and anonymousGID.
  name: root_squash
  types:
  - <xref:bool>
- description: 'UID value that replaces 0 when rootSquash is true. 65534 will be used
    if

    not provided.'
  name: anonymous_uid
  types:
  - <xref:str>
- description: 'GID value that replaces 0 when rootSquash is true. This will use the
    value

    of anonymousUID if not provided.'
  name: anonymous_gid
  types:
  - <xref:str>
methods:
- uid: azure.mgmt.storagecache.models.NfsAccessRule.as_dict
  name: as_dict
  summary: "Return a dict that can be serialized using json.dump.\n\nAdvanced usage\
    \ might optionally use a callback as parameter:\n\nKey is the attribute name used\
    \ in Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with\
    \ the\nmsrest type and 'key' with the RestAPI encoded key.\nValue is the current\
    \ value in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: 'as_dict(keep_readonly: bool = True, key_transformer: ~typing.Callable[[str,
    ~typing.Dict[str, ~typing.Any], ~typing.Any], ~typing.Any] = <function attribute_transformer>,
    **kwargs: ~typing.Any) -> MutableMapping[str, Any]'
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.mgmt.storagecache.models.NfsAccessRule.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: 'deserialize(data: Any, content_type: str | None = None) -> ModelType'
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.storagecache.models.NfsAccessRule.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending() -> None
- uid: azure.mgmt.storagecache.models.NfsAccessRule.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: 'from_dict(data: Any, key_extractors: Callable[[str, Dict[str, Any],
    Any], Any] | None = None, content_type: str | None = None) -> ModelType'
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.storagecache.models.NfsAccessRule.is_xml_model
  name: is_xml_model
  signature: is_xml_model() -> bool
- uid: azure.mgmt.storagecache.models.NfsAccessRule.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to azure from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: 'serialize(keep_readonly: bool = False, **kwargs: Any) -> MutableMapping[str,
    Any]'
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
