### YamlMime:PythonClass
uid: azure.mgmt.monitor.v2020_10_01.models.AlertRuleAnyOfOrLeafCondition
name: AlertRuleAnyOfOrLeafCondition
fullName: azure.mgmt.monitor.v2020_10_01.models.AlertRuleAnyOfOrLeafCondition
module: azure.mgmt.monitor.v2020_10_01.models
inheritances:
- azure.mgmt.monitor.v2020_10_01.models._models_py3.AlertRuleLeafCondition
summary: "An Activity Log Alert rule condition that is met when all its member conditions\
  \ are met.\nEach condition can be of one of the following types:\n**Important**:\
  \ Each type has its unique subset of properties. Properties from different types\n\
  CANNOT exist in one condition.\n\n* **Leaf Condition -** must contain 'field' and\
  \ either 'equals' or 'containsAny'. *Please note, 'anyOf' should **not** be set\
  \ in a Leaf Condition.* \n\n  * **AnyOf Condition -** must contain **only** 'anyOf'\
  \ (which is an array of Leaf Conditions). *Please note, 'field', 'equals' and 'containsAny'\
  \ should **not** be set in an AnyOf \n\nCondition.*."
constructor:
  syntax: 'AlertRuleAnyOfOrLeafCondition(*, field: str | None = None, equals: str
    | None = None, contains_any: List[str] | None = None, any_of: List[_models.AlertRuleLeafCondition]
    | None = None, **kwargs: Any)'
  parameters:
  - name: field
    description: 'The name of the Activity Log event''s field that this condition
      will examine.

      The possible values for this field are (case-insensitive): ''resourceId'', ''category'',
      ''caller'',

      ''level'', ''operationName'', ''resourceGroup'', ''resourceProvider'', ''status'',
      ''subStatus'',

      ''resourceType'', or anything beginning with ''properties''.'
    types:
    - <xref:str>
  - name: equals
    description: 'The value of the event''s field will be compared to this value

      (case-insensitive) to determine if the condition is met.'
    types:
    - <xref:str>
  - name: contains_any
    description: 'The value of the event''s field will be compared to the values in
      this

      array (case-insensitive) to determine if the condition is met.'
    types:
    - <xref:azure.mgmt.monitor.v2015_04_01.aio.operations.ActivityLogsOperations.list>[<xref:str>]
  - name: any_of
    description: 'An Activity Log Alert rule condition that is met when at least one
      of its

      member leaf conditions are met.'
    types:
    - <xref:azure.mgmt.monitor.v2015_04_01.aio.operations.ActivityLogsOperations.list>[<xref:azure.mgmt.monitor.v2020_10_01.models.AlertRuleLeafCondition>]
variables:
- description: 'The name of the Activity Log event''s field that this condition will
    examine.

    The possible values for this field are (case-insensitive): ''resourceId'', ''category'',
    ''caller'',

    ''level'', ''operationName'', ''resourceGroup'', ''resourceProvider'', ''status'',
    ''subStatus'',

    ''resourceType'', or anything beginning with ''properties''.'
  name: field
  types:
  - <xref:str>
- description: 'The value of the event''s field will be compared to this value (case-insensitive)

    to determine if the condition is met.'
  name: equals
  types:
  - <xref:str>
- description: 'The value of the event''s field will be compared to the values in
    this array

    (case-insensitive) to determine if the condition is met.'
  name: contains_any
  types:
  - <xref:list>[<xref:str>]
- description: 'An Activity Log Alert rule condition that is met when at least one
    of its member

    leaf conditions are met.'
  name: any_of
  types:
  - <xref:list>[<xref:azure.mgmt.monitor.v2020_10_01.models.AlertRuleLeafCondition>]
methods:
- uid: azure.mgmt.monitor.v2020_10_01.models.AlertRuleAnyOfOrLeafCondition.as_dict
  name: as_dict
  summary: "Return a dict that can be serialized using json.dump.\n\nAdvanced usage\
    \ might optionally use a callback as parameter:\n\nKey is the attribute name used\
    \ in Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with\
    \ the\nmsrest type and 'key' with the RestAPI encoded key.\nValue is the current\
    \ value in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: 'as_dict(keep_readonly: bool = True, key_transformer: ~typing.Callable[[str,
    ~typing.Dict[str, ~typing.Any], ~typing.Any], ~typing.Any] = <function attribute_transformer>,
    **kwargs: ~typing.Any) -> MutableMapping[str, Any]'
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.mgmt.monitor.v2020_10_01.models.AlertRuleAnyOfOrLeafCondition.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: 'deserialize(data: Any, content_type: str | None = None) -> ModelType'
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.monitor.v2020_10_01.models.AlertRuleAnyOfOrLeafCondition.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending() -> None
- uid: azure.mgmt.monitor.v2020_10_01.models.AlertRuleAnyOfOrLeafCondition.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: 'from_dict(data: Any, key_extractors: Callable[[str, Dict[str, Any],
    Any], Any] | None = None, content_type: str | None = None) -> ModelType'
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.monitor.v2020_10_01.models.AlertRuleAnyOfOrLeafCondition.is_xml_model
  name: is_xml_model
  signature: is_xml_model() -> bool
- uid: azure.mgmt.monitor.v2020_10_01.models.AlertRuleAnyOfOrLeafCondition.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to azure from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: 'serialize(keep_readonly: bool = False, **kwargs: Any) -> MutableMapping[str,
    Any]'
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
