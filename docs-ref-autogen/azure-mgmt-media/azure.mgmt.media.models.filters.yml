### YamlMime:PythonClass
uid: azure.mgmt.media.models.Filters
name: Filters
fullName: azure.mgmt.media.models.Filters
module: azure.mgmt.media.models
inheritances:
- azure.mgmt.media._serialization.Model
summary: Describes all the filtering operations, such as de-interlacing, rotation
  etc. that are to be applied to the input media before encoding.
constructor:
  syntax: 'Filters(*, deinterlace: _models.Deinterlace | None = None, rotation: str
    | _models.Rotation | None = None, crop: _models.Rectangle | None = None, fade_in:
    _models.Fade | None = None, fade_out: _models.Fade | None = None, overlays: List[_models.Overlay]
    | None = None, **kwargs)'
  parameters:
  - name: deinterlace
    description: The de-interlacing settings.
    types:
    - <xref:azure.mgmt.media.models.Deinterlace>
  - name: rotation
    description: 'The rotation, if any, to be applied to the input video, before it
      is

      encoded. Default is Auto. Known values are: "Auto", "None", "Rotate0", "Rotate90",
      "Rotate180",

      and "Rotate270".'
    types:
    - <xref:str>
    - <xref:azure.mgmt.media.models.Rotation>
  - name: crop
    description: The parameters for the rectangular window with which to crop the
      input video.
    types:
    - <xref:azure.mgmt.media.models.Rectangle>
  - name: fade_in
    description: Describes the properties of a Fade effect applied to the input media.
    types:
    - <xref:azure.mgmt.media.models.Fade>
  - name: fade_out
    description: Describes the properties of a Fade effect applied to the input media.
    types:
    - <xref:azure.mgmt.media.models.Fade>
  - name: overlays
    description: 'The properties of overlays to be applied to the input video. These
      could be

      audio, image or video overlays.'
    types:
    - <xref:azure.mgmt.media.aio.operations.AccountFiltersOperations.list>[<xref:azure.mgmt.media.models.Overlay>]
variables:
- description: The de-interlacing settings.
  name: deinterlace
  types:
  - <xref:azure.mgmt.media.models.Deinterlace>
- description: 'The rotation, if any, to be applied to the input video, before it
    is encoded.

    Default is Auto. Known values are: "Auto", "None", "Rotate0", "Rotate90", "Rotate180",
    and

    "Rotate270".'
  name: rotation
  types:
  - <xref:str>
  - <xref:azure.mgmt.media.models.Rotation>
- description: The parameters for the rectangular window with which to crop the input
    video.
  name: crop
  types:
  - <xref:azure.mgmt.media.models.Rectangle>
- description: Describes the properties of a Fade effect applied to the input media.
  name: fade_in
  types:
  - <xref:azure.mgmt.media.models.Fade>
- description: Describes the properties of a Fade effect applied to the input media.
  name: fade_out
  types:
  - <xref:azure.mgmt.media.models.Fade>
- description: 'The properties of overlays to be applied to the input video. These
    could be

    audio, image or video overlays.'
  name: overlays
  types:
  - <xref:list>[<xref:azure.mgmt.media.models.Overlay>]
methods:
- uid: azure.mgmt.media.models.Filters.as_dict
  name: as_dict
  summary: "Return a dict that can be JSONify using json.dump.\n\nAdvanced usage might\
    \ optionally use a callback as parameter:\n\nKey is the attribute name used in\
    \ Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with the\n\
    msrest type and 'key' with the RestAPI encoded key.\nValue is the current value\
    \ in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: as_dict(keep_readonly=True, key_transformer=<function attribute_transformer>,
    **kwargs)
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.mgmt.media.models.Filters.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: deserialize(data, content_type=None)
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.media.models.Filters.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending()
- uid: azure.mgmt.media.models.Filters.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: from_dict(data, key_extractors=None, content_type=None)
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.media.models.Filters.is_xml_model
  name: is_xml_model
  signature: is_xml_model()
- uid: azure.mgmt.media.models.Filters.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to azure from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: serialize(keep_readonly=False, **kwargs)
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
