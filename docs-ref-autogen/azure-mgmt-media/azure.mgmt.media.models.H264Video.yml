### YamlMime:PythonClass
uid: azure.mgmt.media.models.H264Video
name: H264Video
fullName: azure.mgmt.media.models.H264Video
module: azure.mgmt.media.models
inheritances:
- azure.mgmt.media.models._models_py3.Video
summary: 'Describes all the properties for encoding a video with the H.264 codec.


  All required parameters must be populated in order to send to Azure.'
constructor:
  syntax: 'H264Video(*, label: str | None = None, key_frame_interval: timedelta |
    None = None, stretch_mode: str | _models.StretchMode | None = None, sync_mode:
    str | _models.VideoSyncMode | None = None, complexity: str | _models.H264Complexity
    | None = None, layers: List[_models.H264Layer] | None = None, rate_control_mode:
    str | _models.H264RateControlMode | None = None, scene_change_detection: bool
    | None = None, **kwargs)'
  parameters:
  - name: label
    description: 'An optional label for the codec. The label can be used to control
      muxing

      behavior.'
    types:
    - <xref:str>
  - name: key_frame_interval
    description: 'The distance between two key frames. The value should be non-zero

      in the range [0.5, 20] seconds, specified in ISO 8601 format. The default is
      2 seconds(PT2S).

      Note that this setting is ignored if VideoSyncMode.Passthrough is set, where
      the

      KeyFrameInterval value will follow the input source setting.'
    types:
    - <xref:datetime.timedelta>
  - name: stretch_mode
    description: 'The resizing mode - how the input video will be resized to fit the

      desired output resolution(s). Default is AutoSize. Known values are: "None",
      "AutoSize", and

      "AutoFit".'
    types:
    - <xref:str>
    - <xref:azure.mgmt.media.models.StretchMode>
  - name: sync_mode
    description: 'The Video Sync Mode. Known values are: "Auto", "Passthrough", "Cfr",
      and

      "Vfr".'
    types:
    - <xref:str>
    - <xref:azure.mgmt.media.models.VideoSyncMode>
  - name: complexity
    description: 'Tells the encoder how to choose its encoding settings. The default
      value

      is Balanced. Known values are: "Speed", "Balanced", and "Quality".'
    types:
    - <xref:str>
    - <xref:azure.mgmt.media.models.H264Complexity>
  - name: layers
    description: The collection of output H.264 layers to be produced by the encoder.
    types:
    - <xref:azure.mgmt.media.aio.operations.AccountFiltersOperations.list>[<xref:azure.mgmt.media.models.H264Layer>]
  - name: rate_control_mode
    description: 'The video rate control mode. Known values are: "ABR", "CBR", and

      "CRF".'
    types:
    - <xref:str>
    - <xref:azure.mgmt.media.models.H264RateControlMode>
  - name: scene_change_detection
    description: 'Whether or not the encoder should insert key frames at scene

      changes. If not specified, the default is false. This flag should be set to
      true only when the

      encoder is being configured to produce a single output video.'
    types:
    - <xref:bool>
variables:
- description: The discriminator for derived types. Required.
  name: odata_type
  types:
  - <xref:str>
- description: An optional label for the codec. The label can be used to control muxing
    behavior.
  name: label
  types:
  - <xref:str>
- description: 'The distance between two key frames. The value should be non-zero
    in

    the range [0.5, 20] seconds, specified in ISO 8601 format. The default is 2 seconds(PT2S).
    Note

    that this setting is ignored if VideoSyncMode.Passthrough is set, where the KeyFrameInterval

    value will follow the input source setting.'
  name: key_frame_interval
  types:
  - <xref:datetime.timedelta>
- description: 'The resizing mode - how the input video will be resized to fit the
    desired

    output resolution(s). Default is AutoSize. Known values are: "None", "AutoSize",
    and "AutoFit".'
  name: stretch_mode
  types:
  - <xref:str>
  - <xref:azure.mgmt.media.models.StretchMode>
- description: 'The Video Sync Mode. Known values are: "Auto", "Passthrough", "Cfr",
    and

    "Vfr".'
  name: sync_mode
  types:
  - <xref:str>
  - <xref:azure.mgmt.media.models.VideoSyncMode>
- description: 'Tells the encoder how to choose its encoding settings. The default
    value is

    Balanced. Known values are: "Speed", "Balanced", and "Quality".'
  name: complexity
  types:
  - <xref:str>
  - <xref:azure.mgmt.media.models.H264Complexity>
- description: The collection of output H.264 layers to be produced by the encoder.
  name: layers
  types:
  - <xref:list>[<xref:azure.mgmt.media.models.H264Layer>]
- description: 'The video rate control mode. Known values are: "ABR", "CBR", and

    "CRF".'
  name: rate_control_mode
  types:
  - <xref:str>
  - <xref:azure.mgmt.media.models.H264RateControlMode>
- description: 'Whether or not the encoder should insert key frames at scene

    changes. If not specified, the default is false. This flag should be set to true
    only when the

    encoder is being configured to produce a single output video.'
  name: scene_change_detection
  types:
  - <xref:bool>
methods:
- uid: azure.mgmt.media.models.H264Video.as_dict
  name: as_dict
  summary: "Return a dict that can be JSONify using json.dump.\n\nAdvanced usage might\
    \ optionally use a callback as parameter:\n\nKey is the attribute name used in\
    \ Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with the\n\
    msrest type and 'key' with the RestAPI encoded key.\nValue is the current value\
    \ in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: as_dict(keep_readonly=True, key_transformer=<function attribute_transformer>,
    **kwargs)
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.mgmt.media.models.H264Video.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: deserialize(data, content_type=None)
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.media.models.H264Video.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending()
- uid: azure.mgmt.media.models.H264Video.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: from_dict(data, key_extractors=None, content_type=None)
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.media.models.H264Video.is_xml_model
  name: is_xml_model
  signature: is_xml_model()
- uid: azure.mgmt.media.models.H264Video.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to azure from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: serialize(keep_readonly=False, **kwargs)
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
