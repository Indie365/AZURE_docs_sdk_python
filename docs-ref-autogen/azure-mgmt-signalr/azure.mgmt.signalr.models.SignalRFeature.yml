### YamlMime:PythonClass
uid: azure.mgmt.signalr.models.SignalRFeature
name: SignalRFeature
fullName: azure.mgmt.signalr.models.SignalRFeature
module: azure.mgmt.signalr.models
inheritances:
- msrest.serialization.Model
summary: 'Feature of a resource, which controls the runtime behavior.


  All required parameters must be populated in order to send to Azure.'
constructor:
  syntax: 'SignalRFeature(*, flag: str | FeatureFlags, value: str, properties: Dict[str,
    str] | None = None, **kwargs)'
  parameters:
  - name: flag
    description: "Required. FeatureFlags is the supported features of Azure SignalR\
      \ service.\n\n* ServiceMode: Flag for backend server for SignalR service. Values\
      \ allowed: \"Default\": have \n\nyour own backend server; \"Serverless\": your\
      \ application doesn't have a backend server;\n\"Classic\": for backward compatibility.\
      \ Support both Default and Serverless mode but not\nrecommended; \"PredefinedOnly\"\
      : for future use.\n* EnableConnectivityLogs: \"true\"/\"false\", to enable/disable\
      \ the connectivity log category\nrespectively.\n* EnableMessagingLogs: \"true\"\
      /\"false\", to enable/disable the connectivity log category\nrespectively.\n\
      * EnableLiveTrace: Live Trace allows you to know what's happening inside Azure\
      \ SignalR\nservice, it will give you live traces in real time, it will be helpful\
      \ when you developing your\nown Azure SignalR based web application or self-troubleshooting\
      \ some issues. Please note that\nlive traces are counted as outbound messages\
      \ that will be charged. Values allowed:\n\"true\"/\"false\", to enable/disable\
      \ live trace feature. Possible values include: \"ServiceMode\",\n\"EnableConnectivityLogs\"\
      , \"EnableMessagingLogs\", \"EnableLiveTrace\"."
    types:
    - <xref:str>
    - <xref:azure.mgmt.signalr.models.FeatureFlags>
  - name: value
    description: 'Required. Value of the feature flag. See Azure SignalR service document

      [https://docs.microsoft.com/azure/azure-signalr/](https://docs.microsoft.com/azure/azure-signalr/)
      for allowed values.'
    types:
    - <xref:str>
  - name: properties
    description: Optional properties related to this feature.
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
variables:
- description: "Required. FeatureFlags is the supported features of Azure SignalR\
    \ service.\n\n* ServiceMode: Flag for backend server for SignalR service. Values\
    \ allowed: \"Default\": have \n\nyour own backend server; \"Serverless\": your\
    \ application doesn't have a backend server;\n\"Classic\": for backward compatibility.\
    \ Support both Default and Serverless mode but not\nrecommended; \"PredefinedOnly\"\
    : for future use.\n* EnableConnectivityLogs: \"true\"/\"false\", to enable/disable\
    \ the connectivity log category\nrespectively.\n* EnableMessagingLogs: \"true\"\
    /\"false\", to enable/disable the connectivity log category\nrespectively.\n*\
    \ EnableLiveTrace: Live Trace allows you to know what's happening inside Azure\
    \ SignalR\nservice, it will give you live traces in real time, it will be helpful\
    \ when you developing your\nown Azure SignalR based web application or self-troubleshooting\
    \ some issues. Please note that\nlive traces are counted as outbound messages\
    \ that will be charged. Values allowed:\n\"true\"/\"false\", to enable/disable\
    \ live trace feature. Possible values include: \"ServiceMode\",\n\"EnableConnectivityLogs\"\
    , \"EnableMessagingLogs\", \"EnableLiveTrace\"."
  name: flag
  types:
  - <xref:str>
  - <xref:azure.mgmt.signalr.models.FeatureFlags>
- description: 'Required. Value of the feature flag. See Azure SignalR service document

    [https://docs.microsoft.com/azure/azure-signalr/](https://docs.microsoft.com/azure/azure-signalr/)
    for allowed values.'
  name: value
  types:
  - <xref:str>
- description: Optional properties related to this feature.
  name: properties
  types:
  - <xref:dict>[<xref:str>, <xref:str>]
methods:
- uid: azure.mgmt.signalr.models.SignalRFeature.as_dict
  name: as_dict
  summary: "Return a dict that can be JSONify using json.dump.\n\nAdvanced usage might\
    \ optionally use a callback as parameter:\n\nKey is the attribute name used in\
    \ Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with the\n\
    msrest type and 'key' with the RestAPI encoded key.\nValue is the current value\
    \ in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: as_dict(keep_readonly=True, key_transformer=<function attribute_transformer>,
    **kwargs)
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.mgmt.signalr.models.SignalRFeature.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: deserialize(data, content_type=None)
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.signalr.models.SignalRFeature.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending()
- uid: azure.mgmt.signalr.models.SignalRFeature.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: from_dict(data, key_extractors=None, content_type=None)
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.signalr.models.SignalRFeature.is_xml_model
  name: is_xml_model
  signature: is_xml_model()
- uid: azure.mgmt.signalr.models.SignalRFeature.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to azure from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: serialize(keep_readonly=False, **kwargs)
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.mgmt.signalr.models.SignalRFeature.validate
  name: validate
  summary: Validate this model recursively and return a list of ValidationError.
  signature: validate()
  return:
    description: A list of validation error
    types:
    - <xref:list>
