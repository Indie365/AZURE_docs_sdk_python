### YamlMime:PythonClass
uid: azure.mgmt.signalr.models.UpstreamTemplate
name: UpstreamTemplate
fullName: azure.mgmt.signalr.models.UpstreamTemplate
module: azure.mgmt.signalr.models
inheritances:
- msrest.serialization.Model
summary: "Upstream template item settings. It defines the Upstream URL of the incoming\
  \ requests.\nThe template defines the pattern of the event, the hub or the category\
  \ of the incoming request that matches current URL template.\n\n   All required\
  \ parameters must be populated in order to send to Azure.\n\n   ivar hub_pattern:\n\
  \      Gets or sets the matching pattern for hub names. If not set, it matches any\n\
  \      hub.\n      There are 3 kind of patterns supported:\n\n      <!-- literal_block\
  \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\":\
  \ [], \"xml:space\": \"preserve\", \"force\": false, \"language\": \"default\",\
  \ \"highlight_args\": {}, \"linenos\": false} -->\n\n      ````default\n\n     \
  \    1. \"*\", it to matches any hub name.\n         2. Combine multiple hubs with\
  \ \",\", for example \"hub1,hub2\", it matches \"hub1\" and \"hub2\".\n        \
  \ 3. The single hub name, for example, \"hub1\", it matches \"hub1\".\n        \
  \ ````\n\n   vartype hub_pattern:\n      str\n\n   ivar event_pattern:\n      Gets\
  \ or sets the matching pattern for event names. If not set, it matches\n      any\
  \ event.\n      There are 3 kind of patterns supported:\n\n      <!-- literal_block\
  \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\":\
  \ [], \"xml:space\": \"preserve\", \"force\": false, \"language\": \"default\",\
  \ \"highlight_args\": {}, \"linenos\": false} -->\n\n      ````default\n\n     \
  \    1. \"*\", it to matches any event name.\n         2. Combine multiple events\
  \ with \",\", for example \"connect,disconnect\", it matches event\n         ````\n\
  \n      \"connect\" and \"disconnect\".\n         3. The single event name, for\
  \ example, \"connect\", it matches \"connect\". \n\n   vartype event_pattern:\n\
  \      str\n\n   ivar category_pattern:\n      Gets or sets the matching pattern\
  \ for category names. If not set, it\n      matches any category.\n      There are\
  \ 3 kind of patterns supported:\n\n      <!-- literal_block {\"ids\": [], \"classes\"\
  : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"xml:space\": \"preserve\"\
  , \"force\": false, \"language\": \"default\", \"highlight_args\": {}, \"linenos\"\
  : false} -->\n\n      ````default\n\n         1. \"*\", it to matches any category\
  \ name.\n         2. Combine multiple categories with \",\", for example \"connections,messages\"\
  , it matches\n         ````\n\n      category \"connections\" and \"messages\".\n\
  \         3. The single category name, for example, \"connections\", it matches\
  \ the category \n\n      \"connections\".\n\n   vartype category_pattern:\n    \
  \  str\n\n   ivar url_template:\n      Required. Gets or sets the Upstream URL template.\
  \ You can use 3 predefined\n      parameters {hub}, {category} {event} inside the\
  \ template, the value of the Upstream URL is\n      dynamically calculated when\
  \ the client request comes in.\n      For example, if the urlTemplate is `http://example.com/{hub}/api/{event}`,\
  \ with a client\n      request from hub `chat` connects, it will first POST to this\
  \ URL:\n      `http://example.com/chat/api/connect`.\n\n   vartype url_template:\n\
  \      str\n\n   ivar auth:\n      Upstream auth settings. If not set, no auth is\
  \ used for upstream messages.\n\n   vartype auth:\n      ~azure.mgmt.signalr.models.UpstreamAuthSettings"
constructor:
  syntax: 'UpstreamTemplate(*, url_template: str, hub_pattern: str | None = None,
    event_pattern: str | None = None, category_pattern: str | None = None, auth: UpstreamAuthSettings
    | None = None, **kwargs)'
  parameters:
  - name: hub_pattern
    description: "Gets or sets the matching pattern for hub names. If not set, it\
      \ matches\nany hub.\nThere are 3 kind of patterns supported:\n\n<!-- literal_block\
      \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
      : [], \"xml:space\": \"preserve\", \"force\": false, \"language\": \"default\"\
      , \"highlight_args\": {}, \"linenos\": false} -->\n\n````default\n\n   1. \"\
      *\", it to matches any hub name.\n   2. Combine multiple hubs with \",\", for\
      \ example \"hub1,hub2\", it matches \"hub1\" and \"hub2\".\n   3. The single\
      \ hub name, for example, \"hub1\", it matches \"hub1\".\n   ````"
    types:
    - <xref:str>
  - name: event_pattern
    description: "Gets or sets the matching pattern for event names. If not set, it\n\
      matches any event.\nThere are 3 kind of patterns supported:\n\n<!-- literal_block\
      \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
      : [], \"xml:space\": \"preserve\", \"force\": false, \"language\": \"default\"\
      , \"highlight_args\": {}, \"linenos\": false} -->\n\n````default\n\n   1. \"\
      *\", it to matches any event name.\n   2. Combine multiple events with \",\"\
      , for example \"connect,disconnect\", it matches event\n   ````\n\n\"connect\"\
      \ and \"disconnect\".\n   3. The single event name, for example, \"connect\"\
      , it matches \"connect\"."
    types:
    - <xref:str>
  - name: category_pattern
    description: "Gets or sets the matching pattern for category names. If not set,\
      \ it\nmatches any category.\nThere are 3 kind of patterns supported:\n\n<!--\
      \ literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\":\
      \ [], \"backrefs\": [], \"xml:space\": \"preserve\", \"force\": false, \"language\"\
      : \"default\", \"highlight_args\": {}, \"linenos\": false} -->\n\n````default\n\
      \n   1. \"*\", it to matches any category name.\n   2. Combine multiple categories\
      \ with \",\", for example \"connections,messages\", it matches\n   ````\n\n\
      category \"connections\" and \"messages\".\n   3. The single category name,\
      \ for example, \"connections\", it matches the category \n\n\"connections\"."
    types:
    - <xref:str>
  - name: url_template
    description: 'Required. Gets or sets the Upstream URL template. You can use 3

      predefined parameters {hub}, {category} {event} inside the template, the value
      of the Upstream

      URL is dynamically calculated when the client request comes in.

      For example, if the urlTemplate is `http://example.com/{hub}/api/{event}`, with
      a client

      request from hub `chat` connects, it will first POST to this URL:

      `http://example.com/chat/api/connect`.'
    types:
    - <xref:str>
  - name: auth
    description: Upstream auth settings. If not set, no auth is used for upstream
      messages.
    types:
    - <xref:azure.mgmt.signalr.models.UpstreamAuthSettings>
methods:
- uid: azure.mgmt.signalr.models.UpstreamTemplate.as_dict
  name: as_dict
  summary: "Return a dict that can be JSONify using json.dump.\n\nAdvanced usage might\
    \ optionally use a callback as parameter:\n\nKey is the attribute name used in\
    \ Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with the\n\
    msrest type and 'key' with the RestAPI encoded key.\nValue is the current value\
    \ in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: as_dict(keep_readonly=True, key_transformer=<function attribute_transformer>,
    **kwargs)
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.mgmt.signalr.models.UpstreamTemplate.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: deserialize(data, content_type=None)
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.signalr.models.UpstreamTemplate.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending()
- uid: azure.mgmt.signalr.models.UpstreamTemplate.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: from_dict(data, key_extractors=None, content_type=None)
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.signalr.models.UpstreamTemplate.is_xml_model
  name: is_xml_model
  signature: is_xml_model()
- uid: azure.mgmt.signalr.models.UpstreamTemplate.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to azure from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: serialize(keep_readonly=False, **kwargs)
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.mgmt.signalr.models.UpstreamTemplate.validate
  name: validate
  summary: Validate this model recursively and return a list of ValidationError.
  signature: validate()
  return:
    description: A list of validation error
    types:
    - <xref:list>
