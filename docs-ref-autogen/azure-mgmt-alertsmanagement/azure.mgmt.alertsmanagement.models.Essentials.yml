### YamlMime:PythonClass
uid: azure.mgmt.alertsmanagement.models.Essentials
name: Essentials
fullName: azure.mgmt.alertsmanagement.models.Essentials
module: azure.mgmt.alertsmanagement.models
inheritances:
- msrest.serialization.Model
summary: 'This object contains consistent fields across different monitor services.


  Variables are only populated by the server, and will be ignored when sending a request.'
constructor:
  syntax: 'Essentials(*, target_resource: str | None = None, target_resource_name:
    str | None = None, target_resource_group: str | None = None, target_resource_type:
    str | None = None, **kwargs)'
  parameters:
  - name: target_resource
    description: Target ARM resource, on which alert got created.
    isRequired: true
    types:
    - <xref:str>
  - name: target_resource_name
    description: Name of the target ARM resource name, on which alert got created.
    isRequired: true
    types:
    - <xref:str>
  - name: target_resource_group
    description: 'Resource group of target ARM resource, on which alert got

      created.'
    isRequired: true
    types:
    - <xref:str>
  - name: target_resource_type
    description: Resource type of target ARM resource, on which alert got created.
    isRequired: true
    types:
    - <xref:str>
variables:
- description: 'Severity of alert Sev0 being highest and Sev4 being lowest. Possible
    values

    include: "Sev0", "Sev1", "Sev2", "Sev3", "Sev4".'
  name: severity
  types:
  - <xref:str>
  - <xref:azure.mgmt.alertsmanagement.models.Severity>
- description: 'The type of signal the alert is based on, which could be metrics,
    logs or

    activity logs. Possible values include: "Metric", "Log", "Unknown".'
  name: signal_type
  types:
  - <xref:str>
  - <xref:azure.mgmt.alertsmanagement.models.SignalType>
- description: 'Alert object state, which can be modified by the user. Possible values

    include: "New", "Acknowledged", "Closed".'
  name: alert_state
  types:
  - <xref:str>
  - <xref:azure.mgmt.alertsmanagement.models.AlertState>
- description: 'Condition of the rule at the monitor service. It represents whether

    the underlying conditions have crossed the defined alert rule thresholds. Possible
    values

    include: "Fired", "Resolved".'
  name: monitor_condition
  types:
  - <xref:str>
  - <xref:azure.mgmt.alertsmanagement.models.MonitorCondition>
- description: 'Monitor service on which the rule(monitor) is set. Possible values

    include: "Application Insights", "ActivityLog Administrative", "ActivityLog Security",

    "ActivityLog Recommendation", "ActivityLog Policy", "ActivityLog Autoscale", "Log
    Analytics",

    "Nagios", "Platform", "SCOM", "ServiceHealth", "SmartDetector", "VM Insights",
    "Zabbix".'
  name: monitor_service
  types:
  - <xref:str>
  - <xref:azure.mgmt.alertsmanagement.models.MonitorService>
- description: 'Rule(monitor) which fired alert instance. Depending on the monitor
    service,

    this would be ARM id or name of the rule.'
  name: alert_rule
  types:
  - <xref:str>
- description: 'Unique Id created by monitor service for each alert instance. This

    could be used to track the issue at the monitor service, in case of Nagios, Zabbix,
    SCOM etc.'
  name: source_created_id
  types:
  - <xref:str>
- description: Unique Id of the smart group.
  name: smart_group_id
  types:
  - <xref:str>
- description: 'Verbose reason describing the reason why this alert instance is

    added to a smart group.'
  name: smart_grouping_reason
  types:
  - <xref:str>
- description: Creation time(ISO-8601 format) of alert instance.
  name: start_date_time
  types:
  - <xref:datetime.datetime>
- description: Last modification time(ISO-8601 format) of alert instance.
  name: last_modified_date_time
  types:
  - <xref:datetime.datetime>
- description: 'Resolved time(ISO-8601 format) of alert instance.

    This will be updated when monitor service resolves the alert instance because
    the rule

    condition is no longer met.'
  name: monitor_condition_resolved_date_time
  types:
  - <xref:datetime.datetime>
- description: 'User who last modified the alert, in case of monitor service

    updates user would be ''system'', otherwise name of the user.'
  name: last_modified_user_name
  types:
  - <xref:str>
methods:
- uid: azure.mgmt.alertsmanagement.models.Essentials.as_dict
  name: as_dict
  summary: "Return a dict that can be JSONify using json.dump.\n\nAdvanced usage might\
    \ optionally use a callback as parameter:\n\nKey is the attribute name used in\
    \ Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with the\n\
    msrest type and 'key' with the RestAPI encoded key.\nValue is the current value\
    \ in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: as_dict(keep_readonly=True, key_transformer=<function attribute_transformer>,
    **kwargs)
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.mgmt.alertsmanagement.models.Essentials.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: deserialize(data, content_type=None)
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.alertsmanagement.models.Essentials.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending()
- uid: azure.mgmt.alertsmanagement.models.Essentials.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: from_dict(data, key_extractors=None, content_type=None)
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.alertsmanagement.models.Essentials.is_xml_model
  name: is_xml_model
  signature: is_xml_model()
- uid: azure.mgmt.alertsmanagement.models.Essentials.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to azure from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: serialize(keep_readonly=False, **kwargs)
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.mgmt.alertsmanagement.models.Essentials.validate
  name: validate
  summary: Validate this model recursively and return a list of ValidationError.
  signature: validate()
  return:
    description: A list of validation error
    types:
    - <xref:list>
