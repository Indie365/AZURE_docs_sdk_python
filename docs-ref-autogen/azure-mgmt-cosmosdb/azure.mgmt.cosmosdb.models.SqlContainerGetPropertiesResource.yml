### YamlMime:PythonClass
uid: azure.mgmt.cosmosdb.models.SqlContainerGetPropertiesResource
name: SqlContainerGetPropertiesResource
fullName: azure.mgmt.cosmosdb.models.SqlContainerGetPropertiesResource
module: azure.mgmt.cosmosdb.models
inheritances:
- azure.mgmt.cosmosdb.models._models_py3.SqlContainerResource
- azure.mgmt.cosmosdb.models._models_py3.ExtendedResourceProperties
summary: 'SqlContainerGetPropertiesResource.


  Variables are only populated by the server, and will be ignored when sending a request.


  All required parameters must be populated in order to send to Azure.'
constructor:
  syntax: 'SqlContainerGetPropertiesResource(*, id: str, indexing_policy: _models.IndexingPolicy
    | None = None, partition_key: _models.ContainerPartitionKey | None = None, default_ttl:
    int | None = None, unique_key_policy: _models.UniqueKeyPolicy | None = None, conflict_resolution_policy:
    _models.ConflictResolutionPolicy | None = None, client_encryption_policy: _models.ClientEncryptionPolicy
    | None = None, analytical_storage_ttl: int | None = None, **kwargs: Any)'
  parameters:
  - name: id
    description: Name of the Cosmos DB SQL container. Required.
    types:
    - <xref:str>
  - name: indexing_policy
    description: 'The configuration of the indexing policy. By default, the indexing
      is

      automatic for all document paths within the container.'
    types:
    - <xref:azure.mgmt.cosmosdb.models.IndexingPolicy>
  - name: partition_key
    description: 'The configuration of the partition key to be used for partitioning
      data

      into multiple partitions.'
    types:
    - <xref:azure.mgmt.cosmosdb.models.ContainerPartitionKey>
  - name: default_ttl
    description: Default time to live.
    types:
    - <xref:int>
  - name: unique_key_policy
    description: 'The unique key policy configuration for specifying uniqueness

      constraints on documents in the collection in the Azure Cosmos DB service.'
    types:
    - <xref:azure.mgmt.cosmosdb.models.UniqueKeyPolicy>
  - name: conflict_resolution_policy
    description: The conflict resolution policy for the container.
    types:
    - <xref:azure.mgmt.cosmosdb.models.ConflictResolutionPolicy>
  - name: client_encryption_policy
    description: The client encryption policy for the container.
    types:
    - <xref:azure.mgmt.cosmosdb.models.ClientEncryptionPolicy>
  - name: analytical_storage_ttl
    description: Analytical TTL.
    types:
    - <xref:int>
variables:
- description: A system generated property. A unique identifier.
  name: rid
  types:
  - <xref:str>
- description: A system generated property that denotes the last updated timestamp
    of the resource.
  name: ts
  types:
  - <xref:float>
- description: 'A system generated property representing the resource etag required
    for optimistic

    concurrency control.'
  name: etag
  types:
  - <xref:str>
- description: Name of the Cosmos DB SQL container. Required.
  name: id
  types:
  - <xref:str>
- description: 'The configuration of the indexing policy. By default, the indexing
    is

    automatic for all document paths within the container.'
  name: indexing_policy
  types:
  - <xref:azure.mgmt.cosmosdb.models.IndexingPolicy>
- description: 'The configuration of the partition key to be used for partitioning
    data

    into multiple partitions.'
  name: partition_key
  types:
  - <xref:azure.mgmt.cosmosdb.models.ContainerPartitionKey>
- description: Default time to live.
  name: default_ttl
  types:
  - <xref:int>
- description: 'The unique key policy configuration for specifying uniqueness

    constraints on documents in the collection in the Azure Cosmos DB service.'
  name: unique_key_policy
  types:
  - <xref:azure.mgmt.cosmosdb.models.UniqueKeyPolicy>
- description: The conflict resolution policy for the container.
  name: conflict_resolution_policy
  types:
  - <xref:azure.mgmt.cosmosdb.models.ConflictResolutionPolicy>
- description: The client encryption policy for the container.
  name: client_encryption_policy
  types:
  - <xref:azure.mgmt.cosmosdb.models.ClientEncryptionPolicy>
- description: Analytical TTL.
  name: analytical_storage_ttl
  types:
  - <xref:int>
methods:
- uid: azure.mgmt.cosmosdb.models.SqlContainerGetPropertiesResource.as_dict
  name: as_dict
  summary: "Return a dict that can be serialized using json.dump.\n\nAdvanced usage\
    \ might optionally use a callback as parameter:\n\nKey is the attribute name used\
    \ in Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with\
    \ the\nmsrest type and 'key' with the RestAPI encoded key.\nValue is the current\
    \ value in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: 'as_dict(keep_readonly: bool = True, key_transformer: ~typing.Callable[[str,
    ~typing.Dict[str, ~typing.Any], ~typing.Any], ~typing.Any] = <function attribute_transformer>,
    **kwargs: ~typing.Any) -> MutableMapping[str, Any]'
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.mgmt.cosmosdb.models.SqlContainerGetPropertiesResource.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: 'deserialize(data: Any, content_type: str | None = None) -> ModelType'
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.cosmosdb.models.SqlContainerGetPropertiesResource.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending() -> None
- uid: azure.mgmt.cosmosdb.models.SqlContainerGetPropertiesResource.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: 'from_dict(data: Any, key_extractors: Callable[[str, Dict[str, Any],
    Any], Any] | None = None, content_type: str | None = None) -> ModelType'
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.cosmosdb.models.SqlContainerGetPropertiesResource.is_xml_model
  name: is_xml_model
  signature: is_xml_model() -> bool
- uid: azure.mgmt.cosmosdb.models.SqlContainerGetPropertiesResource.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to azure from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: 'serialize(keep_readonly: bool = False, **kwargs: Any) -> MutableMapping[str,
    Any]'
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
