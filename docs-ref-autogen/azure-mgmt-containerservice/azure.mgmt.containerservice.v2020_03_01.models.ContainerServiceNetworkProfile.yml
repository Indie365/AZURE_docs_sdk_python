### YamlMime:PythonClass
uid: azure.mgmt.containerservice.v2020_03_01.models.ContainerServiceNetworkProfile
name: ContainerServiceNetworkProfile
fullName: azure.mgmt.containerservice.v2020_03_01.models.ContainerServiceNetworkProfile
module: azure.mgmt.containerservice.v2020_03_01.models
inheritances:
- azure.mgmt.containerservice._serialization.Model
summary: Profile of network configuration.
constructor:
  syntax: 'ContainerServiceNetworkProfile(*, network_plugin: str | _models.NetworkPlugin
    = ''kubenet'', network_policy: str | _models.NetworkPolicy | None = None, network_mode:
    str | _models.NetworkMode | None = None, pod_cidr: str = ''10.244.0.0/16'', service_cidr:
    str = ''10.0.0.0/16'', dns_service_ip: str = ''10.0.0.10'', docker_bridge_cidr:
    str = ''172.17.0.1/16'', outbound_type: str | _models.OutboundType = ''loadBalancer'',
    load_balancer_sku: str | _models.LoadBalancerSku | None = None, load_balancer_profile:
    _models.ManagedClusterLoadBalancerProfile | None = None, **kwargs: Any)'
  parameters:
  - name: network_plugin
    description: 'Network plugin used for building Kubernetes network. Known values
      are:

      "azure" and "kubenet".'
    types:
    - <xref:str>
    - <xref:azure.mgmt.containerservice.v2020_03_01.models.NetworkPlugin>
  - name: network_policy
    description: 'Network policy used for building Kubernetes network. Known values
      are:

      "calico" and "azure".'
    types:
    - <xref:str>
    - <xref:azure.mgmt.containerservice.v2020_03_01.models.NetworkPolicy>
  - name: network_mode
    description: 'Network mode used for building Kubernetes network. Known values
      are:

      "transparent" and "bridge".'
    types:
    - <xref:str>
    - <xref:azure.mgmt.containerservice.v2020_03_01.models.NetworkMode>
  - name: pod_cidr
    description: A CIDR notation IP range from which to assign pod IPs when kubenet
      is used.
    types:
    - <xref:str>
  - name: service_cidr
    description: 'A CIDR notation IP range from which to assign service cluster IPs.
      It

      must not overlap with any Subnet IP ranges.'
    types:
    - <xref:str>
  - name: dns_service_ip
    description: 'An IP address assigned to the Kubernetes DNS service. It must be

      within the Kubernetes service address range specified in serviceCidr.'
    types:
    - <xref:str>
  - name: docker_bridge_cidr
    description: 'A CIDR notation IP range assigned to the Docker bridge network.
      It

      must not overlap with any Subnet IP ranges or the Kubernetes service address
      range.'
    types:
    - <xref:str>
  - name: outbound_type
    description: 'The outbound (egress) routing method. Known values are: "loadBalancer"

      and "userDefinedRouting".'
    types:
    - <xref:str>
    - <xref:azure.mgmt.containerservice.v2020_03_01.models.OutboundType>
  - name: load_balancer_sku
    description: 'The load balancer sku for the managed cluster. Known values are:

      "standard" and "basic".'
    types:
    - <xref:str>
    - <xref:azure.mgmt.containerservice.v2020_03_01.models.LoadBalancerSku>
  - name: load_balancer_profile
    description: Profile of the cluster load balancer.
    types:
    - <xref:azure.mgmt.containerservice.v2020_03_01.models.ManagedClusterLoadBalancerProfile>
variables:
- description: 'Network plugin used for building Kubernetes network. Known values
    are:

    "azure" and "kubenet".'
  name: network_plugin
  types:
  - <xref:str>
  - <xref:azure.mgmt.containerservice.v2020_03_01.models.NetworkPlugin>
- description: 'Network policy used for building Kubernetes network. Known values
    are:

    "calico" and "azure".'
  name: network_policy
  types:
  - <xref:str>
  - <xref:azure.mgmt.containerservice.v2020_03_01.models.NetworkPolicy>
- description: 'Network mode used for building Kubernetes network. Known values are:

    "transparent" and "bridge".'
  name: network_mode
  types:
  - <xref:str>
  - <xref:azure.mgmt.containerservice.v2020_03_01.models.NetworkMode>
- description: A CIDR notation IP range from which to assign pod IPs when kubenet
    is used.
  name: pod_cidr
  types:
  - <xref:str>
- description: 'A CIDR notation IP range from which to assign service cluster IPs.
    It must

    not overlap with any Subnet IP ranges.'
  name: service_cidr
  types:
  - <xref:str>
- description: 'An IP address assigned to the Kubernetes DNS service. It must be within

    the Kubernetes service address range specified in serviceCidr.'
  name: dns_service_ip
  types:
  - <xref:str>
- description: 'A CIDR notation IP range assigned to the Docker bridge network. It

    must not overlap with any Subnet IP ranges or the Kubernetes service address range.'
  name: docker_bridge_cidr
  types:
  - <xref:str>
- description: 'The outbound (egress) routing method. Known values are: "loadBalancer"
    and

    "userDefinedRouting".'
  name: outbound_type
  types:
  - <xref:str>
  - <xref:azure.mgmt.containerservice.v2020_03_01.models.OutboundType>
- description: 'The load balancer sku for the managed cluster. Known values are:

    "standard" and "basic".'
  name: load_balancer_sku
  types:
  - <xref:str>
  - <xref:azure.mgmt.containerservice.v2020_03_01.models.LoadBalancerSku>
- description: Profile of the cluster load balancer.
  name: load_balancer_profile
  types:
  - <xref:azure.mgmt.containerservice.v2020_03_01.models.ManagedClusterLoadBalancerProfile>
methods:
- uid: azure.mgmt.containerservice.v2020_03_01.models.ContainerServiceNetworkProfile.as_dict
  name: as_dict
  summary: "Return a dict that can be serialized using json.dump.\n\nAdvanced usage\
    \ might optionally use a callback as parameter:\n\nKey is the attribute name used\
    \ in Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with\
    \ the\nmsrest type and 'key' with the RestAPI encoded key.\nValue is the current\
    \ value in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: 'as_dict(keep_readonly: bool = True, key_transformer: ~typing.Callable[[str,
    ~typing.Dict[str, ~typing.Any], ~typing.Any], ~typing.Any] = <function attribute_transformer>,
    **kwargs: ~typing.Any) -> MutableMapping[str, Any]'
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.mgmt.containerservice.v2020_03_01.models.ContainerServiceNetworkProfile.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: 'deserialize(data: Any, content_type: str | None = None) -> ModelType'
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.containerservice.v2020_03_01.models.ContainerServiceNetworkProfile.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending() -> None
- uid: azure.mgmt.containerservice.v2020_03_01.models.ContainerServiceNetworkProfile.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: 'from_dict(data: Any, key_extractors: Callable[[str, Dict[str, Any],
    Any], Any] | None = None, content_type: str | None = None) -> ModelType'
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.containerservice.v2020_03_01.models.ContainerServiceNetworkProfile.is_xml_model
  name: is_xml_model
  signature: is_xml_model() -> bool
- uid: azure.mgmt.containerservice.v2020_03_01.models.ContainerServiceNetworkProfile.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to azure from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: 'serialize(keep_readonly: bool = False, **kwargs: Any) -> MutableMapping[str,
    Any]'
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
